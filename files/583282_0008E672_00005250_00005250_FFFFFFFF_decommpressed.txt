#Область ОписаниеВебСервисов

Функция СоздатьWSПрокси(Параметры)
	
	АдресWSDL = Параметры.АдресWSDL;
	WSСсылка = Параметры.WSСсылка;
	URIПространстваИмен = Параметры.URIПространстваИмен;
	ИмяСервиса = Параметры.ИмяСервиса;
	ИмяТочкиПодключения = Параметры.ИмяТочкиПодключения;
	ИмяПользователя = Параметры.ИмяПользователя;
	Пароль = Параметры.Пароль;
	Таймаут = Параметры.Таймаут;
	Местоположение = Параметры.Местоположение;
	ИспользоватьАутентификациюОС = Параметры.ИспользоватьАутентификациюОС;
	
	WSОпределения = WSСсылка.ПолучитьWSОпределения();
	
	Если ПустаяСтрока(ИмяТочкиПодключения) Тогда
		ИмяТочкиПодключения = ИмяСервиса + "Soap";
	КонецЕсли;
	
	Протокол = "";
	Позиция = СтрНайти(АдресWSDL, "://");
	Если Позиция > 0 Тогда
		Протокол = НРег(Лев(АдресWSDL, Позиция - 1));
	КонецЕсли;
	
	ИнтернетПрокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернетаКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернетаКлиентСервер");
		ИнтернетПрокси = МодульПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(Протокол);
	КонецЕсли;
	
	ЗащищенноеСоединение = Неопределено;
	Если (Протокол = "https" Или Протокол = "ftps")  Тогда
		
		Если Константы.ИспользоватьСертификатыБезопасностиПриПодключении.Получить() Тогда
			СертификатыОС = Новый СертификатыУдостоверяющихЦентровОС();
		Иначе
			СертификатыОС = Неопределено;
		КонецЕсли;
		
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, СертификатыОС);
		
	КонецЕсли;
	
	Прокси = Новый WSПрокси(WSОпределения, URIПространстваИмен, ИмяСервиса, ИмяТочкиПодключения,
		ИнтернетПрокси, Таймаут, ЗащищенноеСоединение, Местоположение, ИспользоватьАутентификациюОС);
	
	Прокси.Пользователь = ИмяПользователя;
	Прокси.Пароль       = Пароль;
	
	Возврат Прокси;
КонецФункции

Функция ПолучитьWSСтруктуру(ТипЗагружаемогоОбъекта, ИмяТипаЗапросаФабрикиXDTO, ПараметрыАвторизации) Экспорт
	WSПрокси 				= Неопределено;
	WSЗапрос 				= Неопределено;
	ПараметрыПодключения 	= ПараметрыРаботыСервиса(ТипЗагружаемогоОбъекта, ИмяТипаЗапросаФабрикиXDTO);
	ПараметрыПодключения.Вставить("ИмяПользователя", ПараметрыАвторизации.ЛогинДляЗагрузкиНСИ);
	ПараметрыПодключения.Вставить("Пароль", 		 ПараметрыАвторизации.ПарольДляЗагрузкиНСИ);
	Попытка
	    WSПрокси 			= СоздатьWSПрокси(ПараметрыПодключения);
		ЗапросФабрикиXDTO 	= WSПрокси.ФабрикаXDTO.Тип(ПараметрыПодключения.ПространствоИмен, ИмяТипаЗапросаФабрикиXDTO);
		WSЗапрос 			= WSПрокси.ФабрикаXDTO.Создать(ЗапросФабрикиXDTO);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(
			"Ошибка описания web-сервиса " + ПараметрыПодключения.ИмяСервиса,
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки,
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	КонецПопытки; 
	
	Структура = Новый Структура();
	Структура.Вставить("WSПрокси", WSПрокси);
	Структура.Вставить("WSЗапрос", WSЗапрос);
	
	Возврат Структура;
КонецФункции

Функция ПолучитьHTTPСоединение(Порт = 8002, НастройкаПодключения)
	
	Попытка
		
		ВидСервераВетисAPI = ОбщегоНазначенияУВССервер.ВидСервераВетисAPI();//Вынести в повторное использование (ИнтеграцияВетисAPIСлужебныйПовтИсп)
		Таймаут            = Константы.ТаймаутСоединения.Получить();//Вынести в повторное использование (ИнтеграцияВетисAPIСлужебныйПовтИсп)
		ИнтернетПрокси     = Неопределено;
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
			МодульПолучениеФайловИзИнтернетаКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернетаКлиентСервер");
			ИнтернетПрокси = МодульПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("https");
		КонецЕсли;
		
		Если Константы.ИспользоватьСертификатыБезопасностиПриПодключении.Получить() Тогда
			СертификатыОС = Новый СертификатыУдостоверяющихЦентровОС();
		Иначе
			СертификатыОС = Неопределено;
		КонецЕсли;
		
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, СертификатыОС);
		
		Если ВидСервераВетисAPI = Перечисления.ВидыСерверовВетисAPI.Основной Тогда
			СоединениеWeb = Новый HTTPСоединение(НастройкаПодключения.АдресСервиса, , НастройкаПодключения.ЛогинДляЗагрузкиНСИ, НастройкаПодключения.ПарольДляЗагрузкиНСИ, ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
		Иначе
			СоединениеWeb = Новый HTTPСоединение(НастройкаПодключения.АдресСервиса, Порт, НастройкаПодключения.ЛогинДляЗагрузкиНСИ, НастройкаПодключения.ПарольДляЗагрузкиНСИ, ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
		КонецЕсли;
		
	Исключение
		ЗаписьЖурналаРегистрации(
			"Ошибка соединения с web-сервисом",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки(),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		Возврат Неопределено
	КонецПопытки;
	
	Возврат СоединениеWeb
КонецФункции

Функция ОтправитьДляОбработкиWeb(СоединениеWeb, ЗапросWeb)

	Попытка
		ОтветWeb = СоединениеWeb.ОтправитьДляОбработки(ЗапросWeb);
	Исключение
		ЗаписьЖурналаРегистрации(
			"Ошибка соединения с web-сервисом",
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки(),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		Возврат Неопределено
	КонецПопытки;

	Возврат ОтветWeb
КонецФункции

Функция ПараметрыРаботыСервиса(ТипЗагружаемогоОбъекта, ЗапросФабрики)
	
	ВидСервераВетисAPI = ОбщегоНазначенияУВССервер.ВидСервераВетисAPI();
	
	Если ТипЗагружаемогоОбъекта = "Метаданные.Справочники.СтраныМира" Тогда
		Если ВидСервераВетисAPI = Перечисления.ВидыСерверовВетисAPI.Основной Тогда
			АдресWSDL           = "https://api.vetrf.ru/schema/platform/services/2.1-RC-last/IkarService_v2.1_production.wsdl";
			WSСсылка            = WSСсылки.IkarService_v2_1_production;
		Иначе
			АдресWSDL           = "https://api.vetrf.ru/schema/platform/services/2.1-RC-last/IkarService_v2.1_pilot.wsdl";
			WSСсылка            = WSСсылки.IkarService_v2_1_pilot;
		КонецЕсли;
		ПространствоИмен 	= "http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2";
		URIПространстваИмен = "http://api.vetrf.ru/schema/cdm/registry/ikar/service/v2";
		ИмяСервиса			= "IkarServiceBindingQSService";
		ИмяТочкиПодключения = "IkarServiceBindingQSPort";
	ИначеЕсли ТипЗагружаемогоОбъекта = "Метаданные.Справочники.КлассификаторЕдиницИзмерения"
		ИЛИ ТипЗагружаемогоОбъекта = "Метаданные.Справочники.НазначениеГрузов"
		ИЛИ ТипЗагружаемогоОбъекта = "Метаданные.Справочники.Заболевания" Тогда
		Если ВидСервераВетисAPI = Перечисления.ВидыСерверовВетисAPI.Основной Тогда
			АдресWSDL           = "https://api.vetrf.ru/schema/platform/services/2.1-RC-last/DictionaryService_v2.1_production.wsdl";
			WSСсылка            = WSСсылки.DictionaryService_v2_1_production;
		Иначе
			АдресWSDL           = "https://api.vetrf.ru/schema/platform/services/2.1-RC-last/DictionaryService_v2.1_pilot.wsdl";
			WSСсылка            = WSСсылки.DictionaryService_v2_1_pilot;
		КонецЕсли;
		ПространствоИмен 	= "http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2";
		URIПространстваИмен = "http://api.vetrf.ru/schema/cdm/registry/dictionary/service/v2";
		ИмяСервиса			= "DictionaryServiceBindingQSService";
		ИмяТочкиПодключения = "DictionaryServiceBindingQSPort";
	ИначеЕсли ТипЗагружаемогоОбъекта = "Метаданные.Справочники.ВидыПродукции"
		Или ТипЗагружаемогоОбъекта = "Метаданные.Справочники.ПодвидыПродукции"
		Или ТипЗагружаемогоОбъекта = "Метаданные.Справочники.Продукция" Тогда
		Если ВидСервераВетисAPI = Перечисления.ВидыСерверовВетисAPI.Основной Тогда
			АдресWSDL           = "https://api.vetrf.ru/schema/platform/services/2.1-RC-last/ProductService_v2.1_production.wsdl";
			WSСсылка            = WSСсылки.ProductService_v2_1_production;
		Иначе
			АдресWSDL           = "https://api.vetrf.ru/schema/platform/services/2.1-RC-last/ProductService_v2.1_pilot.wsdl";
			WSСсылка            = WSСсылки.ProductService_v2_1_pilot;
		КонецЕсли;
		ПространствоИмен 	= "http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2";
		URIПространстваИмен = "http://api.vetrf.ru/schema/cdm/registry/product/service/v2";
		ИмяСервиса			= "ProductServiceBindingQSService";
		ИмяТочкиПодключения = "ProductServiceBindingQSPort";
	ИначеЕсли ТипЗагружаемогоОбъекта = "Метаданные.Справочники.Контрагенты"
		Или ТипЗагружаемогоОбъекта = "Метаданные.Справочники.Предприятия" Тогда
		Если ВидСервераВетисAPI = Перечисления.ВидыСерверовВетисAPI.Основной Тогда
			АдресWSDL           = "https://api.vetrf.ru/schema/platform/services/2.1-RC-last/EnterpriseService_v2.1_production.wsdl";
			WSСсылка            = WSСсылки.EnterpriseService_v2_1_production;
		Иначе
			АдресWSDL           = "https://api.vetrf.ru/schema/platform/services/2.1-RC-last/EnterpriseService_v2.1_pilot.wsdl";
			WSСсылка            = WSСсылки.EnterpriseService_v2_1_pilot;
		КонецЕсли;
		ПространствоИмен 	= "http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2";
		URIПространстваИмен = "http://api.vetrf.ru/schema/cdm/registry/enterprise/service/v2";
		ИмяСервиса			= "EnterpriseServiceBindingQSService";
		ИмяТочкиПодключения = "EnterpriseServiceBindingQSPort";
	ИначеЕсли ТипЗагружаемогоОбъекта = "Метаданные.Справочники.УсловияПеремещения" Тогда
		Если ВидСервераВетисAPI = Перечисления.ВидыСерверовВетисAPI.Основной Тогда
			АдресWSDL           = "https://api.vetrf.ru/schema/platform/services/2.1-RC-last/RegionalizationService_v2.1_production.wsdl";
			WSСсылка            = WSСсылки.RegionalizationService_v2_1_production;
		Иначе
			АдресWSDL           = "https://api.vetrf.ru/schema/platform/services/2.1-RC-last/RegionalizationService_v2.1_pilot.wsdl";
			WSСсылка            = WSСсылки.RegionalizationService_v2_1_pilot;
		КонецЕсли;
		ПространствоИмен 	= "http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2";
		URIПространстваИмен = "http://api.vetrf.ru/schema/cdm/registry/r13n/service/v2";
		ИмяСервиса			= "RegionalizationServiceBindingQSService";
		ИмяТочкиПодключения = "RegionalizationServiceBindingQSPort";
	КонецЕсли;
	
	Таймаут            = Константы.ТаймаутСоединения.Получить();//Вынести в повторное использование (ИнтеграцияВетисAPIСлужебныйПовтИсп)
	
	// заполняем общие настройки
	Результат = Новый Структура();
	Результат.Вставить("ИмяТипаЗапросаФабрикиXDTO"	 , ЗапросФабрики);
	Результат.Вставить("АдресWSDL"					 , АдресWSDL);
	Результат.Вставить("WSСсылка"					 , WSСсылка);
	Результат.Вставить("URIПространстваИмен"		 , URIПространстваИмен);
	Результат.Вставить("ИмяСервиса"					 , ИмяСервиса);
	Результат.Вставить("ИмяТочкиПодключения"		 , ИмяТочкиПодключения);
	Результат.Вставить("ПространствоИмен"			 , ПространствоИмен);
	Результат.Вставить("Таймаут"					 , Таймаут);
	Результат.Вставить("Местоположение"				 , "");
	Результат.Вставить("ИспользоватьАутентификациюОС", Ложь);
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область АутентификацияВетисAPI

Функция ПараметрыПодключенияПользователя(Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("ЛогинПользователя");
	ПараметрыПодключения.Вставить("ПарольПользователя");
	ПараметрыПодключения.Вставить("ОписаниеОшибки");
	
	МассивОшибок = Новый Массив;
	КодОсновногоЯзыка   = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
	ТекстОшибки  = "";
	ОписаниеОшибки = НСтр("ru = 'Ошибки заполнения данных аутентификации инициатора запроса к ""ИС Меркурий""
							|%1.'");
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		
		Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			
			ПользовательМеркурия = ИнтеграцияВетисAPIСервер.ПользовательМеркурия(Пользователь);
			
			Если ЗначениеЗаполнено(ПользовательМеркурия) Тогда
				
				ПараметрыПодключения.ЛогинПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательМеркурия, "Логин");
				
			Иначе
				
				ОписаниеОшибки = НСтр("ru = 'Для пользователя информационной базы %ПользовательИБ% не указан пользователь ИС ""Меркурий"".'");
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ПользовательИБ%", Пользователь);
				МассивОшибок.Добавить(ОписаниеОшибки);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Пользователь) = Тип("СправочникСсылка.ПользователиСистемыМеркурий") Тогда
			
			ПараметрыПодключения.ЛогинПользователя  = Пользователь.Логин;
			
		Иначе
			
			МассивОшибок.Добавить(НСтр("ru = 'В качестве пользователя передан неизвестный тип.'"));
			
		КонецЕсли;
		
		ПараметрыПодключения.ПарольПользователя = "";
		
		Если Не ЗначениеЗаполнено(ПараметрыПодключения.ЛогинПользователя) Тогда
			МассивОшибок.Добавить(НСтр("ru = 'Не указан логин для работы с ""ИС Меркурий""'"));
		КонецЕсли;
		
		//Если Не ЗначениеЗаполнено(ПараметрыПодключения.ПарольПользователя) Тогда//На данный момент пароль нигде не используется, но вдруг понадобится
		//	МассивОшибок.Добавить(НСтр("ru = 'Не указан пароль для работы с ""ИС Меркурий"".'"));
		//КонецЕсли;
		
	Иначе
		
		МассивОшибок.Добавить(НСтр("ru = 'Не указан инициатор запроса к ""ИС Меркурий""'"));
		
	КонецЕсли;
	
	Если МассивОшибок.Количество() > 0 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, СтрСоединить(МассивОшибок, Символы.ПС));
		
		ИмяСобытия = НСтр("ru = 'Получение данных аутентификации пользователя инициировавшего запрос к ""ИС Меркурий"".'", КодОсновногоЯзыка) + " " + НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	КонецЕсли;
	
	ПараметрыПодключения.ОписаниеОшибки = ТекстОшибки;
	
	Возврат ПараметрыПодключения;
КонецФункции

Функция ПараметрыПодключенияКВетисAPI(Организация, Пользователь = Неопределено, ПолучатьНастройкиПользователя = Истина, ВидОперацииОбменаВетисAPI = Неопределено) Экспорт
	
	НастройкиПодключения = Новый Структура;
	НастройкиПодключения.Вставить("АдресСервиса");
	НастройкиПодключения.Вставить("ИдентификаторСервиса");
	НастройкиПодключения.Вставить("Ключ");
	НастройкиПодключения.Вставить("ЛогинДляЗагрузкиНСИ");
	НастройкиПодключения.Вставить("ПарольДляЗагрузкиНСИ");
	НастройкиПодключения.Вставить("Организация");
	НастройкиПодключения.Вставить("ИдентификаторХозяйствующегоСубъекта");
	НастройкиПодключения.Вставить("ФабрикаВетисAPI");
	НастройкиПодключения.Вставить("ОписаниеОшибки");
	
	МассивОшибок        = Новый Массив;
	КодОсновногоЯзыка   = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
	ТекстОшибки         = "";
	ОписаниеОшибки      = НСтр("ru='В настройках подключения к Ветис API по организации ""%1"" обнаружены ошибки:
									|%2'");
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	НастройкиПодключенияКВетисAPI.АдресСервиса,
		|	НастройкиПодключенияКВетисAPI.ИдентификаторСервиса,
		|	НастройкиПодключенияКВетисAPI.Ключ,
		|	НастройкиПодключенияКВетисAPI.ЛогинДляЗагрузкиНСИ,
		|	НастройкиПодключенияКВетисAPI.ПарольДляЗагрузкиНСИ,
		|	НастройкиПодключенияКВетисAPI.Организация,
		|	НастройкиПодключенияКВетисAPI.ИдентификаторХозяйствующегоСубъекта
		|ИЗ
		|	Справочник.НастройкиПодключенияКВетисAPI КАК НастройкиПодключенияКВетисAPI
		|ГДЕ
		|	НастройкиПодключенияКВетисAPI.Организация = &Организация
		|	И НЕ НастройкиПодключенияКВетисAPI.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			МассивОшибок.Добавить(НСтр("ru = 'Не найдены настройки подключения.'"));
			
		Иначе
			
			ТекстОшибкиПолей = НСтр("ru = 'Не указан %1.'");
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ЗаполнитьЗначенияСвойств(НастройкиПодключения, Выборка);
			
			Если НЕ ЗначениеЗаполнено(Выборка.АдресСервиса) Тогда
				МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиПолей, "Адрес сервиса"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторСервиса) Тогда
				МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиПолей, "Идентификатор сервиса"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Выборка.Ключ) Тогда
				МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиПолей, "Ключ"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Выборка.ЛогинДляЗагрузкиНСИ) Тогда
				МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиПолей, "Логин для загрузки НСИ"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Выборка.ПарольДляЗагрузкиНСИ) Тогда
				МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиПолей, "Пароль для загрузки НСИ"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторХозяйствующегоСубъекта) Тогда
				МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиПолей, "Идентификатор хозяйствующего субъекта"));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВидОперацииОбменаВетисAPI) Тогда
				
				НастройкиОбмена = НастройкиОбменаВетисAPI(ВидОперацииОбменаВетисAPI, ТекстОшибки);
				
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					
					МассивОшибок.Добавить(ТекстОшибки);
					
				Иначе
					
					ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НастройкиПодключения, НастройкиОбмена);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПолучатьНастройкиПользователя Тогда
				
				ПараметрыПодключенияПользователя = ПараметрыПодключенияПользователя(Пользователь);
				
				Если ПустаяСтрока(ПараметрыПодключенияПользователя.ОписаниеОшибки) Тогда
					НастройкиПодключения.Вставить("ЛогинПользователя",  ПараметрыПодключенияПользователя.ЛогинПользователя);
					НастройкиПодключения.Вставить("ПарольПользователя", ПараметрыПодключенияПользователя.ПарольПользователя);
				Иначе
					МассивОшибок.Добавить(ПараметрыПодключенияПользователя.ОписаниеОшибки);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		МассивОшибок.Добавить(НСтр("ru = 'Не указана организация для подключения к ""ИС Меркурий"".'"));
		
	КонецЕсли;
	
	Если МассивОшибок.Количество() > 0 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, Организация, СтрСоединить(МассивОшибок, Символы.ПС));
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		НастройкиПодключения.ФабрикаВетисAPI = ИнтеграцияВетисAPIСлужебныйПовтИсп.ФабрикаXDTO_Заявка();
	Иначе
		ИмяСобытия = НСтр("ru = 'Получение настроек подключения к ВЕТИС API.'", КодОсновногоЯзыка) + " " + НСтр("ru='Ошибка доступа'", КодОсновногоЯзыка);
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
	КонецЕсли;
	
	НастройкиПодключения.ОписаниеОшибки = ТекстОшибки;
	
	Возврат НастройкиПодключения;
КонецФункции

Функция ПараметрыПодключенияДляРаботыСоСправочнойИнформацией(ВидОперацииОбменаВетисAPI = Неопределено) Экспорт

	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("ЛогинДляЗагрузкиНСИ");
	ПараметрыПодключения.Вставить("ПарольДляЗагрузкиНСИ");
	ПараметрыПодключения.Вставить("ОписаниеОшибки");
	
	ОписаниеОшибки = НСтр("ru = 'Работа с ""ИС Меркурий"" невозможна по причине:
	    			      |%1'");

	ПредставлениеОшибки = "";
	
	ОрганизацияДляПолученияНСИ = Константы.ОрганизацияДляПолученияНСИ.Получить();
	
	Если ЗначениеЗаполнено(ОрганизацияДляПолученияНСИ) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	НастройкиПодключенияКВетисAPI.ЛогинДляЗагрузкиНСИ КАК ЛогинДляЗагрузкиНСИ,
			|	НастройкиПодключенияКВетисAPI.ПарольДляЗагрузкиНСИ КАК ПарольДляЗагрузкиНСИ
			|ИЗ
			|	Справочник.НастройкиПодключенияКВетисAPI КАК НастройкиПодключенияКВетисAPI
			|ГДЕ
			|	НастройкиПодключенияКВетисAPI.Организация = &ОрганизацияДляПолученияНСИ
			|	И НЕ НастройкиПодключенияКВетисAPI.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ОрганизацияДляПолученияНСИ", ОрганизацияДляПолученияНСИ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			ПредставлениеОшибки = СтрЗаменить("По организации %1 не найдена действующая настройка для подключения к ""ИС Меркурий"".", "%1", ОрганизацияДляПолученияНСИ);
			
		Иначе
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(ПараметрыПодключения, Выборка);
			
			Если ЗначениеЗаполнено(Выборка.ЛогинДляЗагрузкиНСИ) И ЗначениеЗаполнено(Выборка.ПарольДляЗагрузкиНСИ) Тогда
				
				Если ЗначениеЗаполнено(ВидОперацииОбменаВетисAPI) Тогда
					
					ТекстОшибки = "";
					
					НастройкиОбмена = НастройкиОбменаВетисAPI(ВидОперацииОбменаВетисAPI, ТекстОшибки);
					
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда
						
						ПредставлениеОшибки = ТекстОшибки;
						
					Иначе
						
						ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыПодключения, НастройкиОбмена);
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				ПредставлениеОшибки = СтрЗаменить("В настройках подключения к Ветис API по организации %1 обнаружены ошибки:", "%1", ОрганизацияДляПолученияНСИ);
				
				Если НЕ ЗначениеЗаполнено(Выборка.ЛогинДляЗагрузкиНСИ) Тогда
					ПредставлениеОшибки = ПредставлениеОшибки + "
					|• Не указан Логин для загрузки НСИ";
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Выборка.ЛогинДляЗагрузкиНСИ) Тогда
					ПредставлениеОшибки = ПредставлениеОшибки + "
					|• Не указан Пароль для загрузки НСИ";
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ПредставлениеОшибки = "Не указана ""Организация для получения НСИ"". Проверьте заполнение константы ""Организация для получения НСИ"".";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеОшибки) Тогда
		ПараметрыПодключения.ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%1", ПредставлениеОшибки);
	КонецЕсли;
	
	Возврат ПараметрыПодключения;
КонецФункции

Функция НастройкиОбменаВетисAPI(ВидОперацииОбменаВетисAPI, ТекстОшибки = "") Экспорт
	
	НастройкиОбмена = Новый Структура;
	ТекстОшибки     = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиОбменаВетисAPI.КоличествоПопытокПолученияРезультатаПриОшибкахAPLM КАК КоличествоПопытокПолученияРезультатаПриОшибкахAPLM,
		|	НастройкиОбменаВетисAPI.ОбновлениеПоИзменениям КАК ОбновлениеПоИзменениям,
		|	НастройкиОбменаВетисAPI.СмещениеВСпискахЗапросов КАК СмещениеВСпискахЗапросов,
		|	НастройкиОбменаВетисAPI.СмещениеДатыНачалаЗагрузки КАК СмещениеДатыНачалаЗагрузки
		|ИЗ
		|	РегистрСведений.НастройкиОбменаВетисAPI КАК НастройкиОбменаВетисAPI
		|ГДЕ
		|	НастройкиОбменаВетисAPI.ВидОперации = &ВидОперацииОбменаВетисAPI";
	
	Запрос.УстановитьПараметр("ВидОперацииОбменаВетисAPI", ВидОперацииОбменаВетисAPI);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ТекстОшибки = СтрЗаменить(НСтр("ru = 'По заданному виду операции с Ветис API %1 не найдены настройки обмена. Проверьте настройки в ""Настройках обмена с Ветис API"".'"), "%1", ВидОперацииОбменаВетисAPI);
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НастройкиОбмена.Вставить("КоличествоПопытокПолученияРезультатаПриОшибкахAPLM", Выборка.КоличествоПопытокПолученияРезультатаПриОшибкахAPLM);
		НастройкиОбмена.Вставить("ОбновлениеПоИзменениям"    , Выборка.ОбновлениеПоИзменениям);
		НастройкиОбмена.Вставить("СмещениеВСпискахЗапросов"  , Выборка.СмещениеВСпискахЗапросов);
		НастройкиОбмена.Вставить("СмещениеДатыНачалаЗагрузки", Выборка.СмещениеДатыНачалаЗагрузки);
	
	КонецЕсли;
	
	Возврат НастройкиОбмена;
КонецФункции

Функция ФабрикаXDTO_Заявка() Экспорт

	//XDTO-пакеты с пространством имен http://api.vetrf.ru/schema/cdm/application/ws-definitions (схема application_ws_definitions_v1.1) и 
	//http://api.vetrf.ru/schema/cdm/base/ws-definitions (схема base_ws_definitions_v1.1.xsd) в конфигурацию не добавлять!!!! Перестает работать
	
	ИнтернетПрокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернетаКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернетаКлиентСервер");
		ИнтернетПрокси = МодульПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("https");
	КонецЕсли;

	Если Константы.ИспользоватьСертификатыБезопасностиПриПодключении.Получить() Тогда
		СертификатыОС = Новый СертификатыУдостоверяющихЦентровОС();
	Иначе
		СертификатыОС = Неопределено;
	КонецЕсли;
		
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, СертификатыОС);
	
	Таймаут              = Константы.ТаймаутСоединения.Получить();//Вынести в повторное использование (ИнтеграцияВетисAPIСлужебныйПовтИсп)
	
	ВидСервераВетисAPI = ОбщегоНазначенияУВССервер.ВидСервераВетисAPI();
	Если ВидСервераВетисAPI = Перечисления.ВидыСерверовВетисAPI.Основной Тогда
		ОпределениеWS = Новый WSОпределения("https://api.vetrf.ru/schema/platform/services/2.1-RC-last/ams-mercury-g2b.service_v2.1_production.wsdl",,, ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
	Иначе
		ОпределениеWS = Новый WSОпределения("https://api.vetrf.ru/schema/platform/services/2.1-RC-last/ams-mercury-g2b.service_v2.1_pilot.wsdl",,, ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
	КонецЕсли;

	МассивURI = Новый Массив;
	МассивURI.Добавить("http://api.vetrf.ru/schema/cdm/application/ws-definitions");
	МассивURI.Добавить("http://api.vetrf.ru/schema/cdm/base/ws-definitions");
	
	ФабрикаWS = Новый ФабрикаXDTO(ОпределениеWS.ФабрикаXDTO.ЭкспортМоделиXDTO(МассивURI), ФабрикаXDTO.Пакеты);

	Пакеты = Новый Массив;
	Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2"));
	//Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/mercury/vu/applications/v2"));//Для вет. служб
	Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://api.vetrf.ru/schema/cdm/mercury/vet-document/v2"));
	Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://schemas.xmlsoap.org/soap/envelope/"));
	
	Для Каждого Пакет Из ФабрикаWS.Пакеты Цикл
	    Пакеты.Добавить(Пакет);
	КонецЦикла;

	Возврат Новый ФабрикаXDTO(, Пакеты);
КонецФункции

#КонецОбласти

#Область ЗаполнениеДаынныхЗапроса

Функция ПараметрыЗапросаИнтервалДат(ДатаНачалаИнтервала, ДатаОкончанияИнтервала = Неопределено, СмещениеДатыНачалаИнтервала = 0) Экспорт
	
	ДатаНачала    = ?(ЗначениеЗаполнено(ДатаНачалаИнтервала), ДатаНачалаИнтервала, ТекущаяДата()) - СмещениеДатыНачалаИнтервала * 60 * 60;
	ДатаОкончания = ?(ЗначениеЗаполнено(ДатаОкончанияИнтервала), ДатаОкончанияИнтервала, ТекущаяДата());
	
	//Меркурий хранит данные по московскому времени, поэтому нужно пересчитать
	ДатаНачалаУниверсальноеВремя    = УниверсальноеВремя(ДатаНачала);
	ДатаНачалаВЧасовомПоясе         = МестноеВремя(ДатаНачалаУниверсальноеВремя, "Europe/Moscow");
	ДатаОкончанияУниверсальноеВремя = УниверсальноеВремя(ДатаОкончания);
	ДатаОкончанияВЧасовомПоясе      = МестноеВремя(ДатаОкончанияУниверсальноеВремя, "Europe/Moscow");
	
	ПараметрыЗапроса = Новый Соответствие;
	ПараметрыЗапроса.Вставить("updateDateInterval/beginDate", ДатаНачалаВЧасовомПоясе);
	ПараметрыЗапроса.Вставить("updateDateInterval/endDate"	, ДатаОкончанияВЧасовомПоясе);
	
	Возврат ПараметрыЗапроса;
КонецФункции

Процедура СформироватьЗапросПоСправочнойИнформации(ЗапросФабрики, ПараметрыЗапроса, ТипОбъекта, ПараметрыАвторизации, РезультатВыполненияОперации) Экспорт
	
	ОшибкиЗаполнения = Новый Массив;
	
	ПараметрыАвторизацииХС = Новый Структура;
	ПараметрыАвторизацииХС.Вставить("ЛогинДляЗагрузкиНСИ", ПараметрыАвторизации.ЛогинДляЗагрузкиНСИ);
	ПараметрыАвторизацииХС.Вставить("ПарольДляЗагрузкиНСИ", ПараметрыАвторизации.ПарольДляЗагрузкиНСИ);
	WSСтруктура = ИнтеграцияВетисAPIСлужебныйПовтИсп.ПолучитьWSСтруктуру(ТипОбъекта, ЗапросФабрики, ПараметрыАвторизацииХС);
	
	ЗаполнитьСвойстваОбъектаXDTO(WSСтруктура.WSПрокси.ФабрикаXDTO, WSСтруктура.WSЗапрос, ПараметрыЗапроса, ЗапросФабрики, ОшибкиЗаполнения);
	
	Если ОшибкиЗаполнения.Количество() > 0 Тогда
		РезультатВыполненияОперации.ОписаниеОшибки = СтрСоединить(ОшибкиЗаполнения, Символы.ПС);
		Возврат;
	КонецЕсли;
	
	Данные = Неопределено;
	ПредставлениеОшибки = "";
	Счетчик = 1;
	Пока Счетчик < 5 Цикл
		Попытка
			//ЕДИНИЦЫ ИЗМЕРЕНИЯ
			Если ЗапросФабрики ="getUnitListRequest" Тогда//Получение списка актуальных версий единиц измерения (active=true, last=true)
				Данные = WSСтруктура.WSПрокси.GetUnitList(WSСтруктура.WSЗапрос.listOptions);
			ИначеЕсли ЗапросФабрики ="getUnitChangesListRequest" Тогда//Получение списка единиц измерения, в которые были внесены изменения в указанный период
				Данные = WSСтруктура.WSПрокси.GetUnitChangesList(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.updateDateInterval);
			ИначеЕсли ЗапросФабрики ="getUnitByGuidRequest" Тогда//Получения единицы измерения по GUID
				Данные = WSСтруктура.WSПрокси.GetUnitByGuid(ПараметрыЗапроса.Получить("GUID"));
			ИначеЕсли ЗапросФабрики ="getUnitByUuidRequest" Тогда//Получения единицы измерения по UUID
				Данные = WSСтруктура.WSПрокси.GetUnitByUuid(ПараметрыЗапроса.Получить("UUID"));
				
			//ВИДЫ ПРОДУКЦИИ
			ИначеЕсли ЗапросФабрики ="getProductByTypeListRequest" Тогда//Получения вида продукции по типу продукции
				Данные = WSСтруктура.WSПрокси.GetProductByTypeList(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.productType);
			ИначеЕсли ЗапросФабрики ="getProductChangesListRequest" Тогда//Получения списка видов продукции измененных за период
				Данные = WSСтруктура.WSПрокси.GetProductChangesList(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.updateDateInterval);
			ИначеЕсли ЗапросФабрики ="getProductByUuidRequest" Тогда//Получения вида продукции по UUID
				Данные = WSСтруктура.WSПрокси.GetProductByUuid(ПараметрыЗапроса.Получить("UUID"));
			ИначеЕсли ЗапросФабрики ="getProductByGuidRequest" Тогда//Получения вида продукции по GUID
				Данные = WSСтруктура.WSПрокси.GetProductByGuid(ПараметрыЗапроса.Получить("GUID"));
				
			//ПОДВИДЫ ПРОДУКЦИИ
			ИначеЕсли ЗапросФабрики ="getSubProductByProductListRequest" Тогда//Получения подвида продукции по виду продукции
				Данные = WSСтруктура.WSПрокси.GetSubProductByProductList(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.productGuid);
			ИначеЕсли ЗапросФабрики ="getSubProductChangesListRequest" Тогда//Получения списка подвидов продукции измененных за период
				Данные = WSСтруктура.WSПрокси.GetSubProductChangesList(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.updateDateInterval);
			ИначеЕсли ЗапросФабрики ="getSubProductByGuidRequest" Тогда//Получения подвида продукции по GUID
				Данные = WSСтруктура.WSПрокси.GetSubProductByGuid(ПараметрыЗапроса.Получить("GUID"));
			ИначеЕсли ЗапросФабрики ="getSubProductByUuidRequest" Тогда//Получения подвида продукции по UUID
				Данные = WSСтруктура.WSПрокси.GetSubProductByUuid(ПараметрыЗапроса.Получить("UUID"));
				
			//ПРОДУКЦИЯ
			ИначеЕсли ЗапросФабрики ="getProductItemByGuidRequest" Тогда//Получения продукции по GUID
				Данные = WSСтруктура.WSПрокси.GetProductItemByGuid(ПараметрыЗапроса.Получить("GUID"));
			ИначеЕсли ЗапросФабрики ="getProductItemByUuidRequest" Тогда//Получения продукции по UUID
				Данные = WSСтруктура.WSПрокси.GetProductItemByUuid(ПараметрыЗапроса.Получить("UUID"));
			ИначеЕсли ЗапросФабрики ="getProductItemListRequest" Тогда//Получения списка продукции по фильтру предприятие и подвид продукции
				Данные = WSСтруктура.WSПрокси.GetProductItemList(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.productType,
								WSСтруктура.WSЗапрос.product, WSСтруктура.WSЗапрос.subproduct, WSСтруктура.WSЗапрос.businessEntity, WSСтруктура.WSЗапрос.enterprise, WSСтруктура.WSЗапрос.producer, WSСтруктура.WSЗапрос.globalID);
			ИначеЕсли ЗапросФабрики ="getProductItemChangesListRequest" Тогда//Получения списка продукции измененной за период
				Данные = WSСтруктура.WSПрокси.GetProductItemChangesList(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.updateDateInterval,
								WSСтруктура.WSЗапрос.businessEntity, WSСтруктура.WSЗапрос.enterprise, WSСтруктура.WSЗапрос.producer);
								
			//НАЗНАЧЕНИЕ ГРУЗОВ
			ИначеЕсли ЗапросФабрики ="getPurposeListRequest" Тогда//Получения списка назначений грузов
				Данные = WSСтруктура.WSПрокси.GetPurposeList(WSСтруктура.WSЗапрос.listOptions);
			ИначеЕсли ЗапросФабрики ="getPurposeChangesListRequest" Тогда//Получения списка назначений грузов измененных за период
				Данные = WSСтруктура.WSПрокси.GetPurposeChangesList(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.updateDateInterval);
			ИначеЕсли ЗапросФабрики ="getPurposeByGuidRequest" Тогда//Получения назначения груза по GUID
				Данные = WSСтруктура.WSПрокси.GetPurposeByGuid(ПараметрыЗапроса.Получить("GUID"));
			ИначеЕсли ЗапросФабрики ="getPurposeByUuidRequest" Тогда//Получения назначения груза по UUID
				Данные = WSСтруктура.WSПрокси.GetPurposeByUuid(ПараметрыЗапроса.Получить("UUID"));
			
			//КОНТРАГЕНТЫ
			ИначеЕсли ЗапросФабрики ="getBusinessEntityByGuidRequest" Тогда//Получения контрагента по GUID
				Данные = WSСтруктура.WSПрокси.GetBusinessEntityByGuid(ПараметрыЗапроса.Получить("GUID"));
			ИначеЕсли ЗапросФабрики ="getBusinessEntityByUuidRequest" Тогда//Получения контрагента по GUID
				Данные = WSСтруктура.WSПрокси.GetBusinessEntityByUuid(ПараметрыЗапроса.Получить("UUID"));
			ИначеЕсли ЗапросФабрики ="getBusinessEntityListRequest" Тогда//Получения данных контрагентов по фильтру
				Данные = WSСтруктура.WSПрокси.GetBusinessEntityList(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.businessEntity);
			ИначеЕсли ЗапросФабрики ="getBusinessEntityChangesListRequest" Тогда//Получения данных контрагентов измененных за период
				Данные = WSСтруктура.WSПрокси.GetBusinessEntityChangesList(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.updateDateInterval);
			ИначеЕсли ЗапросФабрики ="getActivityLocationListRequest" Тогда//получение списка привязанных предприятий к контрагенту
				Данные = WSСтруктура.WSПрокси.GetActivityLocationList(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.businessEntity);
				
			//ПРЕДПРИЯТИЯ
			ИначеЕсли ЗапросФабрики ="getEnterpriseByGuidRequest" Тогда//получение последней в истории записи предприятия по его глобальному идентификатору
				Данные = WSСтруктура.WSПрокси.GetEnterpriseByGuid(ПараметрыЗапроса.Получить("GUID"));
			ИначеЕсли ЗапросФабрики ="getEnterpriseByUuidRequest" Тогда//получение последней в истории записи предприятия по его глобальному идентификатору
				Данные = WSСтруктура.WSПрокси.GetEnterpriseByUuid(ПараметрыЗапроса.Получить("UUID"));
			ИначеЕсли ЗапросФабрики ="getRussianEnterpriseListRequest" Тогда//получение списка российских предприятий по фильтру
				Данные = WSСтруктура.WSПрокси.GetRussianEnterpriseList(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.enterprise);
			ИначеЕсли ЗапросФабрики ="getRussianEnterpriseChangesListRequest" Тогда//получение списка российских предприятий измененных за период
				Данные = WSСтруктура.WSПрокси.GetRussianEnterpriseChangesList(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.updateDateInterval);
			ИначеЕсли ЗапросФабрики ="getForeignEnterpriseListRequest" Тогда//получение списка иностранных предприятий по фильтру
				//Вторым параметрам передаем 0 иначе начинает ругаться на недостаточное количество параметров
				//0 - все зарубежные предприятия (Параметр определяющий группировку предприятий (аттестованные или нет))
				Данные = WSСтруктура.WSПрокси.GetForeignEnterpriseList(WSСтруктура.WSЗапрос.listOptions, 0, WSСтруктура.WSЗапрос.enterprise);
			ИначеЕсли ЗапросФабрики ="getForeignEnterpriseChangesListRequest" Тогда//получение списка иностранных предприятий измененных за период
				Данные = WSСтруктура.WSПрокси.GetForeignEnterpriseChangesList(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.updateDateInterval);
			ИначеЕсли ЗапросФабрики ="getBusinessMemberByGLNRequest" Тогда//получение пары контрагент предприятие по GLN
				Данные = WSСтруктура.WSПрокси.GetBusinessMemberByGLN(WSСтруктура.WSЗапрос.globalID);

			//АДРЕСНЫЙ КЛАССИФИКАТОР
			ИначеЕсли ЗапросФабрики ="getCountryByGuidRequest" Тогда//Получение страны мира по GUID
				Данные = WSСтруктура.WSПрокси.GetCountryByGuid(ПараметрыЗапроса.Получить("GUID"));
			ИначеЕсли ЗапросФабрики ="getAllCountryListRequest" Тогда//Получение списка актуальных версий стран мира (active=true, last=true)
				Данные = WSСтруктура.WSПрокси.GetAllCountryList(WSСтруктура.WSЗапрос.listOptions);
			ИначеЕсли ЗапросФабрики ="getCountryChangesListRequest" Тогда//Получение списка стран мира, в которые были внесены изменения в указанный период
				Данные = WSСтруктура.WSПрокси.GetCountryChangesList(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.updateDateInterval);
			ИначеЕсли ЗапросФабрики ="getRegionListByCountryRequest" Тогда//получение списка регионов по идентификатору страны
				Данные = WSСтруктура.WSПрокси.GetRegionListByCountry(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.countryGuid);
			ИначеЕсли ЗапросФабрики ="getDistrictListByRegionRequest" Тогда//получение списка районов определённого региона
				Данные = WSСтруктура.WSПрокси.GetDistrictListByRegion(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.regionGUID);
			ИначеЕсли ЗапросФабрики ="getLocalityListByRegionRequest" Тогда//получение списка населённых пунктов по идентификатору района
				Данные = WSСтруктура.WSПрокси.GetLocalityListByRegion(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.regionGuid);
			ИначеЕсли ЗапросФабрики ="getLocalityListByDistrictRequest" Тогда//получение списка населённых пунктов по идентификатору района
				Данные = WSСтруктура.WSПрокси.GetLocalityListByDistrict(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.districtGUID);
			ИначеЕсли ЗапросФабрики ="getLocalityListByLocalityRequest" Тогда//получение списка населённых пунктов по идентификатору района
				Данные = WSСтруктура.WSПрокси.GetLocalityListByLocality(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.localityGUID);
			ИначеЕсли ЗапросФабрики ="getStreetListByLocalityRequest" Тогда//получение списка улиц по идентификатору населённого пункта
				Данные = WSСтруктура.WSПрокси.GetStreetListByLocality(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.localityGuid);
			ИначеЕсли ЗапросФабрики ="findLocalityListByNameRequest" Тогда//получение списка населённых пунктов по имени или его части
				Данные = WSСтруктура.WSПрокси.FindLocalityListByName(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.regionGuid, WSСтруктура.WSЗапрос.pattern);
			ИначеЕсли ЗапросФабрики ="findStreetListByNameRequest" Тогда//получение списка улиц по названию или его части и идентификатору населённого пункта
				Данные = WSСтруктура.WSПрокси.FindStreetListByName(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.localityGuid, WSСтруктура.WSЗапрос.pattern);
				
			//ЗАБОЛЕВАНИЯ
			ИначеЕсли ЗапросФабрики ="getDiseaseListRequest" Тогда//Получения списка заболеваний
				Данные = WSСтруктура.WSПрокси.GetDiseaseList(WSСтруктура.WSЗапрос.listOptions);
			ИначеЕсли ЗапросФабрики ="getDiseaseChangesListRequest" Тогда//Получения списка заболеваний измененных за период
				Данные = WSСтруктура.WSПрокси.GetDiseaseChangesList(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.updateDateInterval);
			ИначеЕсли ЗапросФабрики ="getDiseaseByGuidRequest" Тогда//Получение заболевания по GUID
				Данные = WSСтруктура.WSПрокси.GetDiseaseByGuid(ПараметрыЗапроса.Получить("GUID"));
			ИначеЕсли ЗапросФабрики ="getDiseaseByUuidRequest" Тогда//Получение заболевания по UUID
				Данные = WSСтруктура.WSПрокси.GetDiseaseByUuid(ПараметрыЗапроса.Получить("UUID"));
				
			//СПИСОК УСЛОВИЙ ПЕРЕМЕЩЕНИЯ ГРУЗОВ
			ИначеЕсли ЗапросФабрики ="getR13nConditionListRequest" Тогда//Получения списка условий перемещения
				Данные = WSСтруктура.WSПрокси.GetR13nConditionList(WSСтруктура.WSЗапрос.listOptions, WSСтруктура.WSЗапрос.disease);
			КонецЕсли;
			Прервать;
		Исключение
			ПредставлениеОшибки = ОписаниеОшибки();
			Если СтрНайти(ПредставлениеОшибки, "not found") > 0
				ИЛИ СтрНайти(ПредставлениеОшибки, "401 Unauthorized")
				ИЛИ СтрНайти(ПредставлениеОшибки, "Couldn't resolve host name")
				ИЛИ СтрНайти(ПредставлениеОшибки, "Internal Service Error")
				ИЛИ СтрНайти(ПредставлениеОшибки, "Недостаточно фактических параметров")
				ИЛИ СтрНайти(ПредставлениеОшибки, "Received request is invalid") Тогда
				Прервать;
			Иначе
				УстановитьТаймаут();
			КонецЕсли;
		КонецПопытки;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Если Данные = Неопределено Тогда
		Если ЗначениеЗаполнено(ПредставлениеОшибки) Тогда
			РезультатВыполненияОперации.ОписаниеОшибки = ПредставлениеОшибки;
		Иначе
			РезультатВыполненияОперации.ОписаниеОшибки = СтрЗаменить("При выполнении запроса по справочной информации произошла неизвестная ошибка. Запрос: %1", "%1", ЗапросФабрики);
		КонецЕсли;
	КонецЕсли;
	
	РезультатВыполненияОперации.Результат = Данные;
КонецПроцедуры

Процедура ЗаполнитьСвойстваОбъектаXDTO(Фабрика, Знач Запрос, Соответствие, Родитель = "", ОшибкиЗаполнения = Неопределено) Экспорт

	ТекстОшибки = НСтр("ru='Ошибка при установке значения атрибута %1 у объекта %2. Попытка установки значения %3.
						|Техническая информация:
						|%4'");
	Для каждого Стр Из Соответствие Цикл
		
		Массив 	   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Стр.Ключ, "/");
		Количество = Массив.Количество()-1;
		Свойство   = Запрос;
		Для Сч = 0 По Количество Цикл
			ЭлементМассива = Массив[Сч];
			Если Стр.Значение = Неопределено Или Не Сч = Количество Тогда
				Если Свойство.ПолучитьXDTO(ЭлементМассива) = Неопределено Тогда
					Свойство = ИнициализироватьСвойствоXDTO(Фабрика, Свойство, ЭлементМассива);
				Иначе
					Свойство = Свойство.ПолучитьXDTO(ЭлементМассива);
				КонецЕсли;
			Иначе
				Попытка
					Если ТипЗнч(Стр.Значение) = Тип("Массив") Тогда
						МассивЗначений = Стр.Значение;
						Для Каждого ТекЭлемент Из МассивЗначений Цикл
							Свойство[ЭлементМассива].Добавить(ТекЭлемент);
						КонецЦикла;
					Иначе
						Свойство[ЭлементМассива] = Стр.Значение;
					КонецЕсли;
				Исключение
					ПредставлениеОшибки = ОписаниеОшибки();
					Если ОшибкиЗаполнения <> Неопределено Тогда
						ОшибкиЗаполнения.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Стр.Ключ, Родитель, ?(ЗначениеЗаполнено(Стр.Значение), Стр.Значение, "'Пустое значение'"), ПредставлениеОшибки));
					КонецЕсли;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Функция ИнициализироватьСвойствоXDTO(Фабрика, Объект, ИмяСвойства)

	Свойство = Объект.Тип().Свойства.Получить(ИмяСвойства);
	Объект[ИмяСвойства] = Фабрика.Создать(Свойство.Тип);
	Возврат Объект[ИмяСвойства];
	
КонецФункции

#КонецОбласти

#Область ОтправкаИПолучениеРезультатаВВетисAPI

// Процедура ОтправкаЗаявки - предназначена для отправки запроса через шлюз Ветис.API (интерфейс работы с ИС Меркурий) на выполнения операции.
// В случаи штатного выполнения запроса вернется GUID заявки, по которому в дальнейшем будет получен результат выполнения запроса.
// Идея асинхронного вызова Ветис.API: шаг 1 - получения идентификатора; шаг 2 - получения результата по ранее полученному идентификатору.
//	НастройкаПодключения - Структура - структура с настройками для подключения к шлюзу Ветис.API;
//	ДатаДокумента - Дата и время - для выполнения запроса через шлюз Ветис.API необходимо указать дату данного запроса, в основном ТекущаяДата();
//	ИмяОперации - строка - имя выполняемой операции (Корневой элемент содержимого заявки);
//  ПараметрыОперации - объектXDTO - сформированный запрос для выполнения через шлюз Ветис.API;
//	РезультатВыполненияОперации - структура - свойства:
//  	ТекстОшибки - строка - в случаи неудачноого выполнения операции указывается текст ошибки
//  	Результат - произвольный - в результате успешного выполнения операции будет записан идентификатор заявки
Процедура ОтправкаЗаявки(НастройкиПодключенияКВетисAPI, ДатаДокумента, ИмяОперации, ПараметрыОперации, РезультатВыполненияОперации, ДокументСсылка = Неопределено) Экспорт
	
	ФабрикаВетисAPI = НастройкиПодключенияКВетисAPI.ФабрикаВетисAPI;
	
	ТекстЗапросаОтправка = "";
	ЗаявкаОтправка_ОтветWeb = ОтправкаЗаявкиВВетисAPI(НастройкиПодключенияКВетисAPI, ДатаДокумента, ИмяОперации, ПараметрыОперации, ТекстЗапросаОтправка, ДокументСсылка);
	
	РезультатВыполненияОперации.ТекстЗапроса     = ТекстЗапросаОтправка;
	
	Если ЗаявкаОтправка_ОтветWeb = Неопределено Тогда
		
		Статус      = Справочники.СтатусыЗаявок.ОшибкаОтправкиЗапроса;
		ТекстОшибки = НСтр("ru = 'Произошли ошибки соединения.
								 |Подробности см. в Журнале регистрации.'");
		
		РезультатВыполненияОперации.Статус           = Статус;
		РезультатВыполненияОперации.ОшибкаСоединения = Истина;
		РезультатВыполненияОперации.ОписаниеОшибки   = ТекстОшибки;
		
		Если ЗначениеЗаполнено(ДокументСсылка) Тогда
			УстановитьТекущийСтатусСостоянийЗаявокНаОформлениеОпераций(ДокументСсылка, Статус, "", "", ТекстОшибки);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ТекстОтветаОтправка = ЗаявкаОтправка_ОтветWeb.ПолучитьТелоКакСтроку("UTF-8");
	
	РезультатВыполненияОперации.ТекстОтвета     = ТекстОтветаОтправка;
	
	ЗаявкаОтправка_КодСостояния = ЗаявкаОтправка_ОтветWeb.КодСостояния;
	
	Если ЗаявкаОтправка_КодСостояния = 200 Тогда
		
		ЗапросТело = ФабрикаВетисAPI.Создать("http://schemas.xmlsoap.org/soap/envelope/", "Envelope");
		
		ОтветXML = Новый ЧтениеXML;
		ОтветXML.УстановитьСтроку(ТекстОтветаОтправка);
		
		Приложение 			= ФабрикаВетисAPI.ПрочитатьXML(ОтветXML, ЗапросТело.Тип()).Body.submitApplicationResponse.application;
		ЗаявкаОтправка_GUID = Приложение.applicationId;
		Статус              = Справочники.СтатусыЗаявок.IDПолучен;
		
		РезультатВыполненияОперации.Статус    = Статус;
		РезультатВыполненияОперации.Результат = ЗаявкаОтправка_GUID;
		
		Если ЗначениеЗаполнено(ДокументСсылка) Тогда
			ИнтеграцияВетисAPIСлужебный.УстановитьТекущийСтатусСостоянийЗаявокНаОформлениеОпераций(ДокументСсылка, Статус, ЗаявкаОтправка_GUID, ТекстОтветаОтправка);
		КонецЕсли;
		
	Иначе
		
		КодОсновногоЯзыка   = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
		
		ИмяСобытия = НСтр("ru = 'Ошибка отправки заявки в ИС ""Меркурий"".'", КодОсновногоЯзыка);
		
		ПредставлениеОшибки = НСтр("ru = 'Ошибка ответа сервера. Код состояния сервера: %1. 
		                            |Текст запроса:
		                            |%2:
									|Описание ошибки:
									|%3'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, Строка(ЗаявкаОтправка_КодСостояния), ТекстЗапросаОтправка, ТекстОтветаОтправка);
		
		Статус = Справочники.СтатусыЗаявок.ОшибкаОтправкиЗапроса;
		
		РезультатВыполненияОперации.Статус         = Статус;
		РезультатВыполненияОперации.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка выполнения операции: %1'"), ТекстОшибки);
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ИмяОперации, ТекстОшибки);
		
		Если ЗначениеЗаполнено(ДокументСсылка) Тогда
			УстановитьТекущийСтатусСостоянийЗаявокНаОформлениеОпераций(ДокументСсылка, Статус, "", "", ТекстОтветаОтправка);
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатВыполненияОперации.КодСостояния = ЗаявкаОтправка_КодСостояния;
КонецПроцедуры

// Процедура ПолучениеРезультатаЗаявки - предназначена для получения результат запроса через шлюз Ветис.API (интерфейс работы с ИС Меркурий) по ранее полученному идентификатору с помощью процедуры ОтправкаЗаявки.
//	НастройкаПодключения - Структура - структура с настройками для подключения к шлюзу Ветис.API;
//	ИдентификаторЗаявки - строка - идентификатор по которому необходимо получить ответ от шлюза Ветис.API
//	РезультатВыполненияОперации - структура - свойства:
//  	ТекстОшибки - строка - в случаи неудачноого выполнения операции указывается текст ошибки
//  	Результат - произвольный - в результате успешного выполнения операции будет записан идентификатор заявки
Процедура ПолучениеРезультатаЗаявки(НастройкиПодключенияКВетисAPI, ИдентификаторЗаявки, РезультатВыполненияОперации, ДокументСсылка = Неопределено) Экспорт
	
	ФабрикаВетисAPI = НастройкиПодключенияКВетисAPI.ФабрикаВетисAPI;
	
	ТекстЗапросаПолучение = "";
	ЗаявкаПолучение_ОтветWeb = ЗаявкаПолучениеРезультатаИзВетисAPI(НастройкиПодключенияКВетисAPI, ИдентификаторЗаявки, ТекстЗапросаПолучение, ДокументСсылка);
	
	РезультатВыполненияОперации.ТекстЗапроса     = ТекстЗапросаПолучение;
	
	Если ЗаявкаПолучение_ОтветWeb = Неопределено Тогда
		РезультатВыполненияОперации.ОшибкаСоединения = Истина;
		РезультатВыполненияОперации.ОписаниеОшибки = НСтр("ru = 'Произошли ошибки соединения. Подробности см. в Журнале регистрации.'");
		Возврат;
	КонецЕсли;
	
	ТекстОтветаПолучение = ЗаявкаПолучение_ОтветWeb.ПолучитьТелоКакСтроку("UTF-8");
	
	РезультатВыполненияОперации.ТекстОтвета     = ТекстОтветаПолучение;
	
	ЗаявкаПолучение_КодСостояния = ЗаявкаПолучение_ОтветWeb.КодСостояния;
	Если ЗаявкаПолучение_КодСостояния = 200 Тогда
		
		ЗапросТело = ФабрикаВетисAPI.Создать("http://schemas.xmlsoap.org/soap/envelope/", "Envelope");
		
		ОтветXML = Новый ЧтениеXML;
		ОтветXML.УстановитьСтроку(ТекстОтветаПолучение);
		
		Приложение = ФабрикаВетисAPI.ПрочитатьXML(ОтветXML, ЗапросТело.Тип()).Body.receiveApplicationResultResponse.application;
		
		//Получается нормальная структура но сбиваются имена (
		//ЗаписьXML = Новый ЗаписьXML;
		//ЗаписьXML.УстановитьСтроку("UTF-8");
		//ЗаписьXML.ЗаписатьОбъявлениеXML();
		//ФабрикаВетисAPI.ЗаписатьXML(ЗаписьXML, Приложение);
		//СтрокаXML = ЗаписьXML.Закрыть();
		//РезультатВыполненияОперации.ТекстОтвета     = СтрокаXML;
		
		РезультатВыполненияОперации.Статус = Приложение.status;
		
		Если Приложение.status = "IN_PROCESS" Тогда
			РезультатВыполненияОперации.ОписаниеОшибки = НСтр("ru = 'Превышен интервал ожидания ответа от web-сервиса.'");
		ИначеЕсли Приложение.status = "REJECTED" Тогда
			Если СуществуетСвойствоXDTO("errors", Приложение) Тогда
				ТекстОшибки = ПолучитьОписаниеОшибокЗаявки(Приложение.errors);
			Иначе
				ТекстОшибки = НСтр("ru = 'Заявка отклонена без указания причины.'");
			КонецЕсли;
			РезультатВыполненияОперации.ОписаниеОшибки = ТекстОшибки;
		ИначеЕсли Приложение.status = "COMPLETED" Тогда
			РезультатВыполненияОперации.Результат = Приложение;
			РезультатВыполненияОперации.ОписаниеОшибки = "";
		КонецЕсли;
	
	Иначе
		
		КодОсновногоЯзыка   = ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
		
		ИмяСобытия = НСтр("ru = 'Ошибка получения результата заявки из ИС ""Меркурий"".'", КодОсновногоЯзыка);
		
		ПредставлениеОшибки = НСтр("ru = 'Ошибка ответа сервера. Код состояния сервера: %1. Описание ошибки:
									|%2'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, Строка(ЗаявкаПолучение_КодСостояния), ТекстОтветаПолучение);
		
		РезультатВыполненияОперации.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка выполнения операции: %1'"), ТекстОшибки);
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , ИдентификаторЗаявки, ТекстОшибки);
		
	КонецЕсли;
	
	РезультатВыполненияОперации.КодСостояния = ЗаявкаПолучение_КодСостояния;
КонецПроцедуры

// Процедура ПолучениеРезультатаЗаявкиСПовторнымОпросомСервера - вызов процедуры ПолучениеРезультатаЗаявки с повторной отправкой, если ответ имеет статус = "IN_PROCESS"
// 	Сначала делаем попытки получить результат с постепенным увеличением интервала времени на 40% 
// 	от текущего значенния, но не больше выставленного пользователем в "ТаймаутОпросаСервера".
// 	Затем делаем попытки получить результат количество раз выставленное пользователем
// 	в "КоличествоПопытокОпросаСервера" через интервал выставленный пользователем в "ТаймаутОпросаСервера"
Процедура ПолучениеРезультатаЗаявкиСПовторнымОпросомСервера(НастройкиПодключенияКВетисAPI, ИдентификаторЗаявки, РезультатВыполненияОперации, ДокументСсылка = Неопределено) Экспорт
	
	ТаймаутОпросаСервера = Константы.ТаймаутОпросаСервера.Получить();
	ИнтервалМеждуЗапросами = 1;
	Коэффициент = 1.4;
	
	ЗаявкаОбрабатывается = Истина;
	
	Пока ИнтервалМеждуЗапросами < ТаймаутОпросаСервера Цикл
		УстановитьТаймаут(ИнтервалМеждуЗапросами);
		ПолучениеРезультатаЗаявки(НастройкиПодключенияКВетисAPI, ИдентификаторЗаявки, РезультатВыполненияОперации, ДокументСсылка);
		
		Если Не РезультатВыполненияОперации.Статус = "IN_PROCESS" Тогда
			ЗаявкаОбрабатывается = Ложь;
			Прервать;
		КонецЕсли;
		
		ИнтервалМеждуЗапросами = ИнтервалМеждуЗапросами * Коэффициент;
	КонецЦикла;
	
	Если ЗаявкаОбрабатывается Тогда
		
		КоличествоПопытокОпросаСервера = Константы.КоличествоПопытокОпросаСервера.Получить();
		КоличествоТекущихПопыток = 0;
	
		Пока КоличествоТекущихПопыток <= КоличествоПопытокОпросаСервера Цикл
			УстановитьТаймаут(ТаймаутОпросаСервера);
			ПолучениеРезультатаЗаявки(НастройкиПодключенияКВетисAPI, ИдентификаторЗаявки, РезультатВыполненияОперации, ДокументСсылка);
			
			Если Не РезультатВыполненияОперации.Статус = "IN_PROCESS" Тогда
				Прервать;
			КонецЕсли;
			
			КоличествоТекущихПопыток = КоличествоТекущихПопыток + 1;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОтправкаЗаявкиВВетисAPI(НастройкаПодключения, ДатаДокумента, ИмяОперации, ПараметрыОперации, ТекстЗапроса = "", ДокументСсылка = Неопределено)

	Фабрика    = НастройкаПодключения.ФабрикаВетисAPI;
	
	ЗапросТело = Фабрика.Создать("http://schemas.xmlsoap.org/soap/envelope/", "Envelope");
	
	СоответствиеТело = Новый Соответствие;
	СоответствиеТело.Вставить("body");
	ЗаполнитьСвойстваОбъектаXDTO(Фабрика, ЗапросТело, СоответствиеТело);
	
	ЗапросПриложение = Фабрика.Создать("http://api.vetrf.ru/schema/cdm/application/ws-definitions", "submitApplicationRequest");
	
	ПараметрыПриложения = Новый Соответствие;
	ПараметрыПриложения.Вставить("apiKey"				, НастройкаПодключения.Ключ);
	ПараметрыПриложения.Вставить("application/serviceId", НастройкаПодключения.ИдентификаторСервиса);
	ПараметрыПриложения.Вставить("application/issuerId"	, НастройкаПодключения.ИдентификаторХозяйствующегоСубъекта);
	ПараметрыПриложения.Вставить("application/issueDate", ДатаДокумента);
	ПараметрыПриложения.Вставить("application/data");
	
	ЗаполнитьСвойстваОбъектаXDTO(Фабрика, ЗапросПриложение, ПараметрыПриложения);
	
	Если ТипЗнч(ПараметрыОперации) = Тип("Соответствие") Тогда
	    //ЗапросИтог = Фабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/applications", ИмяОперации);
		ЗапросИтог = Фабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/g2b/applications/v2", ИмяОперации);
		//ЗапросИтог = Фабрика.Создать("http://api.vetrf.ru/schema/cdm/mercury/vu/applications/v2", ИмяОперации);
		ЗаполнитьСвойстваОбъектаXDTO(Фабрика, ЗапросИтог, ПараметрыОперации);
	Иначе	
		ЗапросИтог = ПараметрыОперации;
	КонецЕсли;
	
	ЗапросПриложение.application.data.Добавить(ФормаXML.Элемент, ЗапросИтог.Тип().URIПространстваИмен, ИмяОперации, ЗапросИтог);
	ЗапросТело.body.Добавить(ФормаXML.Элемент, ЗапросПриложение.Тип().URIПространстваИмен, "submitApplicationRequest", ЗапросПриложение);
	
	ТелоXML = Новый ЗаписьXML;
	ТелоXML.УстановитьСтроку("UTF-8");
	Фабрика.ЗаписатьXML(ТелоXML, ЗапросТело);
	
	ЗапросWeb = Новый HTTPЗапрос("platform/services/2.1/ApplicationManagementService");
	ЗапросWeb.УстановитьТелоИзСтроки(ТелоXML.Закрыть());
	ТекстЗапроса = ЗапросWeb.ПолучитьТелоКакСтроку();
	
	СоединениеWeb = ПолучитьHTTPСоединение( ,НастройкаПодключения);
	
	Если СоединениеWeb = Неопределено Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		УстановитьТекущийСтатусСостоянийЗаявокНаОформлениеОпераций(ДокументСсылка, Справочники.СтатусыЗаявок.Отправлена, "", ТекстЗапроса);
	КонецЕсли;
	
	ОтветWeb = ОтправитьДляОбработкиWeb(СоединениеWeb, ЗапросWeb);
	СоединениеWeb = Неопределено;
	
	Если ОтветWeb = Неопределено Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Возврат ОтветWeb;
КонецФункции

Функция ЗаявкаПолучениеРезультатаИзВетисAPI(НастройкаПодключения, ЗаявкаОтправка_GUID, ТекстЗапроса = "", ДокументСсылка = Неопределено) Экспорт

	Фабрика    = НастройкаПодключения.ФабрикаВетисAPI;
	ЗапросТело = Фабрика.Создать("http://schemas.xmlsoap.org/soap/envelope/", "Envelope");
	
	СоответствиеТело = Новый Соответствие;
	СоответствиеТело.Вставить("body");
	ЗаполнитьСвойстваОбъектаXDTO(Фабрика, ЗапросТело, СоответствиеТело);
	ЗапросПриложение = Фабрика.Создать("http://api.vetrf.ru/schema/cdm/application/ws-definitions", "receiveApplicationResultRequest");
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("apiKey"			, НастройкаПодключения.Ключ);
	Соответствие.Вставить("issuerId"		, НастройкаПодключения.ИдентификаторХозяйствующегоСубъекта);
	Соответствие.Вставить("applicationId"	, ЗаявкаОтправка_GUID);
	
	ЗаполнитьСвойстваОбъектаXDTO(Фабрика, ЗапросПриложение, Соответствие);
	ЗапросТело.body.Добавить(ФормаXML.Элемент, ЗапросПриложение.Тип().URIПространстваИмен, "receiveApplicationResultRequest", ЗапросПриложение);
	
	ТелоXML = Новый ЗаписьXML;
	ТелоXML.УстановитьСтроку("UTF-8");
	Фабрика.ЗаписатьXML(ТелоXML, ЗапросТело);
	
	ЗапросWeb = Новый HTTPЗапрос("platform/services/2.1/ApplicationManagementService");
	ЗапросWeb.УстановитьТелоИзСтроки(ТелоXML.Закрыть());
	ТекстЗапроса = ЗапросWeb.ПолучитьТелоКакСтроку();
	
	СоединениеWeb = ПолучитьHTTPСоединение( ,НастройкаПодключения);
	
	Если СоединениеWeb = Неопределено Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		УстановитьТекущийСтатусСостоянийЗаявокНаОформлениеОпераций(ДокументСсылка, Справочники.СтатусыЗаявок.IDОтправлен, ЗаявкаОтправка_GUID, ТекстЗапроса);
	КонецЕсли;
	
	ОтветWeb = ОтправитьДляОбработкиWeb(СоединениеWeb, ЗапросWeb);
	СоединениеWeb = Неопределено;
	
	Если ОтветWeb = Неопределено Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Возврат ОтветWeb;
КонецФункции

#КонецОбласти

#Область ОтправкаИПолучениеРезультатаВВетисAPIНовое

Процедура ОтправкаЗаявкиФрагмент(ПараметрыПодключения, РеквизитыСообщения, ДатаОперации, ИмяОперации, ЗапросДляОбработки) Экспорт
	
	ФабрикаВетисAPI = ПараметрыПодключения.ФабрикаВетисAPI;
	
	ЗапросТело      = ФабрикаВетисAPI.Создать("http://schemas.xmlsoap.org/soap/envelope/", "Envelope");
	
	СоответствиеТело = Новый Соответствие;
	СоответствиеТело.Вставить("body");
	ЗаполнитьСвойстваОбъектаXDTO(ФабрикаВетисAPI, ЗапросТело, СоответствиеТело);
	
	ЗапросПриложение = ФабрикаВетисAPI.Создать("http://api.vetrf.ru/schema/cdm/application/ws-definitions", "submitApplicationRequest");
	
	ПараметрыПриложения = Новый Соответствие;
	ПараметрыПриложения.Вставить("apiKey"               , ПараметрыПодключения.Ключ);
	ПараметрыПриложения.Вставить("application/serviceId", ПараметрыПодключения.ИдентификаторСервиса);
	ПараметрыПриложения.Вставить("application/issuerId" , ПараметрыПодключения.ИдентификаторХозяйствующегоСубъекта);
	ПараметрыПриложения.Вставить("application/issueDate", ДатаОперации);
	ПараметрыПриложения.Вставить("application/data");
	
	ЗаполнитьСвойстваОбъектаXDTO(ФабрикаВетисAPI, ЗапросПриложение, ПараметрыПриложения);
	
	ЗапросПриложение.application.data.Добавить(ФормаXML.Элемент, ЗапросДляОбработки.Тип().URIПространстваИмен, ИмяОперации, ЗапросДляОбработки);
	ЗапросТело.body.Добавить(ФормаXML.Элемент, ЗапросПриложение.Тип().URIПространстваИмен, "submitApplicationRequest", ЗапросПриложение);
	
	ТелоXML = Новый ЗаписьXML;
	ТелоXML.УстановитьСтроку("UTF-8");
	ФабрикаВетисAPI.ЗаписатьXML(ТелоXML, ЗапросТело);
	
	ЗапросWeb = Новый HTTPЗапрос("platform/services/2.1/ApplicationManagementService");
	ЗапросWeb.УстановитьТелоИзСтроки(ТелоXML.Закрыть());
	ТекстЗапроса = ЗапросWeb.ПолучитьТелоКакСтроку();
	
	РеквизитыСообщения.СтатусЗаявки = Справочники.СтатусыЗаявок.Отправлена;
	ДобавитьСообщениеВПротоколОбмена(ТекстЗапроса, РеквизитыСообщения, 1);
	
	РезультатОтправкиЗапроса = ОтправитьЗапросДляОбработки(ПараметрыПодключения, ЗапросWeb);
	
	РеквизитыСообщения.КодСостоянияСервера    = РезультатОтправкиЗапроса.КодСостояния;
	РеквизитыСообщения.ОшибкиВыполненияОбмена = РезультатОтправкиЗапроса.ТекстОшибки;
	
	Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
		
		ОтветXML = Новый ЧтениеXML;
		ОтветXML.УстановитьСтроку(РезультатОтправкиЗапроса.ТекстОтвета);
		
		Приложение = ФабрикаВетисAPI.ПрочитатьXML(ОтветXML, ЗапросТело.Тип()).Body.submitApplicationResponse.application;
		
		РеквизитыСообщения.ИдентификаторЗаявки = Приложение.applicationId;
		РеквизитыСообщения.СтатусЗаявки        = Справочники.СтатусыЗаявок.IDПолучен;
		
	Иначе
		
		ОбработатьСообщениеОбОшибке(ФабрикаВетисAPI, РезультатОтправкиЗапроса.ТекстОтвета, РеквизитыСообщения);
		
		РеквизитыСообщения.СтатусЗаявки = Справочники.СтатусыЗаявок.ОшибкаОтправкиЗапроса;
		
	КонецЕсли;
	
	ДобавитьСообщениеВПротоколОбмена(РезультатОтправкиЗапроса.ТекстОтвета, РеквизитыСообщения, 2);
	
КонецПроцедуры

Процедура ПолучениеРезультатаЗаявкиФрагмент(ПараметрыПодключения, РеквизитыСообщения) Экспорт
	
	ФабрикаВетисAPI = ПараметрыПодключения.ФабрикаВетисAPI;
	
	ЗапросТело = ФабрикаВетисAPI.Создать("http://schemas.xmlsoap.org/soap/envelope/", "Envelope");
	
	СоответствиеТело = Новый Соответствие;
	СоответствиеТело.Вставить("body");
	ЗаполнитьСвойстваОбъектаXDTO(ФабрикаВетисAPI, ЗапросТело, СоответствиеТело);
	ЗапросПриложение = ФабрикаВетисAPI.Создать("http://api.vetrf.ru/schema/cdm/application/ws-definitions", "receiveApplicationResultRequest");
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("apiKey"       , ПараметрыПодключения.Ключ);
	Соответствие.Вставить("issuerId"     , ПараметрыПодключения.ИдентификаторХозяйствующегоСубъекта);
	Соответствие.Вставить("applicationId", РеквизитыСообщения.ИдентификаторЗаявки);
	
	ЗаполнитьСвойстваОбъектаXDTO(ФабрикаВетисAPI, ЗапросПриложение, Соответствие);
	ЗапросТело.body.Добавить(ФормаXML.Элемент, ЗапросПриложение.Тип().URIПространстваИмен, "receiveApplicationResultRequest", ЗапросПриложение);
	
	ТелоXML = Новый ЗаписьXML;
	ТелоXML.УстановитьСтроку("UTF-8");
	ФабрикаВетисAPI.ЗаписатьXML(ТелоXML, ЗапросТело);
	
	ЗапросWeb = Новый HTTPЗапрос("platform/services/2.1/ApplicationManagementService");
	ЗапросWeb.УстановитьТелоИзСтроки(ТелоXML.Закрыть());
	ТекстЗапроса = ЗапросWeb.ПолучитьТелоКакСтроку();
	
	РеквизитыСообщения.КодСостоянияСервера = "";
	РеквизитыСообщения.СтатусЗаявки        = Справочники.СтатусыЗаявок.IDОтправлен;
	
	ДобавитьСообщениеВПротоколОбмена(ТекстЗапроса, РеквизитыСообщения, 3);
	
	РезультатОтправкиЗапроса = ОтправитьЗапросДляОбработки(ПараметрыПодключения, ЗапросWeb);
	
	РеквизитыСообщения.КодСостоянияСервера    = РезультатОтправкиЗапроса.КодСостояния;
	РеквизитыСообщения.ОшибкиВыполненияОбмена = РезультатОтправкиЗапроса.ТекстОшибки;
	
	Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
		
		ОтветXML = Новый ЧтениеXML;
		ОтветXML.УстановитьСтроку(РезультатОтправкиЗапроса.ТекстОтвета);
		
		Приложение    = ФабрикаВетисAPI.ПрочитатьXML(ОтветXML, ЗапросТело.Тип()).Body.receiveApplicationResultResponse.application;
		СтатусЗапроса = Приложение.status;
		
		Если СтатусЗапроса = "IN_PROCESS" Тогда
			РеквизитыСообщения.СтатусЗаявки = Справочники.СтатусыЗаявок.Обрабатывается;
		ИначеЕсли СтатусЗапроса = "REJECTED" Тогда
			РеквизитыСообщения.СтатусЗаявки = Справочники.СтатусыЗаявок.Отклонена;
			Если СуществуетСвойствоXDTO("errors", Приложение) Тогда
				РеквизитыСообщения.ОшибкиВыполненияОбмена = ПолучитьОписаниеОшибокЗаявки(Приложение.errors);
			Иначе
				РеквизитыСообщения.ОшибкиВыполненияОбмена = НСтр("ru = 'Заявка отклонена без указания причины.'");
			КонецЕсли;
		ИначеЕсли СтатусЗапроса = "COMPLETED" Тогда
			РеквизитыСообщения.СтатусЗаявки      = Справочники.СтатусыЗаявок.УспешноОбработана;
			РеквизитыСообщения.РезультатОперации = Приложение;
		КонецЕсли;
		
	Иначе
		
		ОбработатьСообщениеОбОшибке(ФабрикаВетисAPI, РезультатОтправкиЗапроса.ТекстОтвета, РеквизитыСообщения);
		
		РеквизитыСообщения.СтатусЗаявки = Справочники.СтатусыЗаявок.ОшибкаОтправкиID;
		
	КонецЕсли;
	
	ДобавитьСообщениеВПротоколОбмена(РезультатОтправкиЗапроса.ТекстОтвета, РеквизитыСообщения, 4);
	
КонецПроцедуры

Функция ОтправитьЗапросДляОбработки(ПараметрыПодключения, ЗапросWeb)
	
	РезультатОтправкиЗапроса = Новый Структура;
	РезультатОтправкиЗапроса.Вставить("КодСостояния");
	РезультатОтправкиЗапроса.Вставить("ТекстОтвета");
	РезультатОтправкиЗапроса.Вставить("ТекстОшибки");
	
	ВидСервераВетисAPI = ОбщегоНазначенияУВССервер.ВидСервераВетисAPI();
	Таймаут            = Константы.ТаймаутСоединения.Получить();
	ИнтернетПрокси     = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси("https");
	Порт               = ?(ВидСервераВетисAPI = Перечисления.ВидыСерверовВетисAPI.Основной, 443, 8002);
	
	Если Константы.ИспользоватьСертификатыБезопасностиПриПодключении.Получить() Тогда
		СертификатыОС = Новый СертификатыУдостоверяющихЦентровОС();
	Иначе
		СертификатыОС = Неопределено;
	КонецЕсли;
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, СертификатыОС);
	
	ТекстОшибки = "";
	Попытка
		
		СоединениеWeb = Новый HTTPСоединение(
			ПараметрыПодключения.АдресСервиса,
			Порт,
			ПараметрыПодключения.ЛогинДляЗагрузкиНСИ,
			ПараметрыПодключения.ПарольДляЗагрузкиНСИ,
			ИнтернетПрокси,
			Таймаут,
			ЗащищенноеСоединение);
			
		ОтветWeb = СоединениеWeb.ОтправитьДляОбработки(ЗапросWeb);
		
	Исключение
		
		ОтветWeb = Неопределено;
		РезультатОтправкиЗапроса.ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Ошибка соединения с web-сервисом.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Если ОтветWeb <> Неопределено Тогда
		РезультатОтправкиЗапроса.КодСостояния = ОтветWeb.КодСостояния;
		РезультатОтправкиЗапроса.ТекстОтвета  = ОтветWeb.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Возврат РезультатОтправкиЗапроса;
КонецФункции

Функция ДобавитьСообщениеВПротоколОбмена(ТекстСообщения, РеквизитыСообщения, ЭтапВыполненияОбмена)
	
	ТипВладельцаФайлов  = ТипЗнч(РеквизитыСообщения.Документ);
	Если ТипВладельцаФайлов = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника      = "ПротоколОбменаВетисAPIПрисоединенныеФайлы";
	Иначе
		МетаданныеВладельца = Метаданные.НайтиПоТипу(ТипВладельцаФайлов);
		ИмяСправочника      = МетаданныеВладельца.Имя + "ПрисоединенныеФайлы";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПротоколОбмена.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК ПротоколОбмена
		|ГДЕ
		|	ПротоколОбмена.ИдентификаторЗапроса = &ИдентификаторЗапроса
		|	И ПротоколОбмена.ВладелецФайла = &ВладелецФайла
		|	И ПротоколОбмена.ВидОперации = &ВидОперации
		|	И ПротоколОбмена.ЭтапВыполненияОбмена = &ЭтапВыполненияОбмена";
	
	Запрос.УстановитьПараметр("ВидОперации"         , РеквизитыСообщения.ВидОперации);
	Запрос.УстановитьПараметр("ВладелецФайла"       , РеквизитыСообщения.Документ);
	Запрос.УстановитьПараметр("ИдентификаторЗапроса", Строка(РеквизитыСообщения.ИдентификаторЗапроса));
	Запрос.УстановитьПараметр("ЭтапВыполненияОбмена", ЭтапВыполненияОбмена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ПрисоединенныйФайл = Неопределено;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ПрисоединенныйФайл = Выборка.Ссылка;
		
	КонецЕсли;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ТекстСообщения);
	ТекстовыйДокумент.Записать(ИмяВременногоФайла, КодировкаТекста.UTF8, "");
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		
	КонецПопытки;
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор",              Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов",     РеквизитыСообщения.Документ);
	ПараметрыФайла.Вставить("ИмяБезРасширения",   Строка(Новый УникальныйИдентификатор));
	ПараметрыФайла.Вставить("РасширениеБезТочки", "xml");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
	
	Если ПрисоединенныйФайл = Неопределено Тогда
		
		ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(
			ПараметрыФайла,
			АдресФайлаВоВременномХранилище,,,
			Справочники[ИмяСправочника].ПолучитьСсылку());
		
	Иначе
		
		ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста", "");
		ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
		
		РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ПараметрыФайла);
		
	КонецЕсли;
	
	ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(ПрисоединенныйФайлОбъект, РеквизитыСообщения);
	ПрисоединенныйФайлОбъект.ЭтапВыполненияОбмена = ЭтапВыполненияОбмена;
	ПрисоединенныйФайлОбъект.Записать();

	Возврат ПрисоединенныйФайлОбъект.Ссылка;
КонецФункции

#КонецОбласти

#Область ФормированиеСпискаДокументовДляОбработки

// Возвращает выборку запроса с итогом по организации, которые необходимо выгрузить в систему "Меркурий"
//
// Возвращаемое значение:
//   ВыборкаРезультатаЗапроса - выборка содержащая документы по которым необходимо отправить/получить данные из Меркурия
//
Функция ВыборкаЗаявокНаОформлениеОперацийКОтправке(ВидОперации) Экспорт 
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка,
		|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.Статус,
		|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.GUID_Меркурий,
		|	ВЫРАЗИТЬ(ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка КАК [ТипДокумента]).Организация КАК Организация
		|ИЗ
		|	РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.СрезПоследних(, ДокументСсылка ССЫЛКА [ТипДокумента]) КАК ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних
		|ГДЕ
		|	ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.Статус В (&СтатусыЗаявок)
		|	И ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка <> НЕОПРЕДЕЛЕНО
		|	И НЕ ЖурналРегистрацииСостоянийЗаявокНаОформлениеОперацийСрезПоследних.ДокументСсылка.ПометкаУдаления";
	
		Если ВидОперации = "ОтправкаАннулированийВСД" ИЛИ ВидОперации = "ПолучениеАннулированийВСД" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ТипДокумента]", "Документ.АннулированиеВСД");
		ИначеЕсли ВидОперации = "ОтправкаИнвентаризаций" ИЛИ ВидОперации = "ПолучениеИнвентаризаций" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ТипДокумента]", "Документ.Инвентаризации");
		ИначеЕсли ВидОперации = "ОтправкаОбъединенияЗаписейСкладскогоЖурнала" ИЛИ ВидОперации = "ПолучениеОбъединенияЗаписейСкладскогоЖурнала" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ТипДокумента]", "Документ.ОбъединениеЗаписейСкладскогоЖурнала");
		ИначеЕсли ВидОперации = "ОтправкаПриходныхОпераций" ИЛИ ВидОперации = "ПолучениеПриходныхОпераций" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ТипДокумента]", "Документ.ПриходныеОперации");
		ИначеЕсли ВидОперации = "ОтправкаПроизводственныхОпераций" ИЛИ ВидОперации = "ПолучениеПроизводственныхОпераций" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ТипДокумента]", "Документ.ПроизводственныеОперации");
		ИначеЕсли ВидОперации = "ОтправкаТранспортныхОпераций" ИЛИ ВидОперации = "ПолучениеТранспортныхОпераций" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ТипДокумента]", "Документ.ТранспортныеОперации");
		ИначеЕсли ВидОперации = "ОтправкаВнесенийНомеровТранспортныхСредств" ИЛИ ВидОперации = "ПолучениеВнесенийНомеровТранспортныхСредств" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ТипДокумента]", "Документ.ВнесениеНомеровТранспортныхСредств");
		ИначеЕсли ВидОперации = "ОтправкаВнесенийЛабораторныхИсследований" ИЛИ ВидОперации = "ПолучениеВнесенийЛабораторныхИсследований" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ТипДокумента]", "Документ.ВнесениеСведенийОЛабораторныхИсследованиях");
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			 |ИТОГИ ПО
			 |	Организация";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	СтатусыЗаявок = Новый СписокЗначений;
	Если СтрНайти(ВидОперации, "Отправка") Тогда
		СтатусыЗаявок.Добавить(Справочники.СтатусыЗаявок.Новая);
	Иначе
		СтатусыЗаявок.Добавить(Справочники.СтатусыЗаявок.IDПолучен);
		СтатусыЗаявок.Добавить(Справочники.СтатусыЗаявок.IDОтправлен);
		СтатусыЗаявок.Добавить(Справочники.СтатусыЗаявок.Обрабатывается);
		//Для ситуации когда ID заявки из Меркурия получен, но при попытке получения по нему результата возникает ошибка
		СтатусыЗаявок.Добавить(Справочники.СтатусыЗаявок.ОшибкаОтправкиID);
		СтатусыЗаявок.Добавить(Справочники.СтатусыЗаявок.ОшибкаОбработкиОтвета);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтатусыЗаявок", СтатусыЗаявок);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат Выборка;
КонецФункции

#КонецОбласти

#Область ИнформацияОХодеВыполненииОбмена

Процедура СформироватьРезультатВыполненияОперации(ДатаНачалаВыполненияОперации, ВидОперации, ОшибкиПриВыполненииОпераций, ВыводитьСообщения = Ложь) Экспорт
	
	ДатаОкончанияВыполненияОперации = ТекущаяДата();
	СдвигатьДатуЗагрузки = Истина;
	
	МассивОшибок = Новый Массив;
	ПредставлениеОшибки = НСтр("ru = 'Событие: %1.
		|%2'");
	
	Для Каждого ТекОшибка Из ОшибкиПриВыполненииОпераций Цикл
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки, ТекОшибка.Ключ, ТекОшибка.Значение);
		МассивОшибок.Добавить(ТекстОшибки);
		
		СдвигатьДатуЗагрузки = Ложь;
		
	КонецЦикла;
	
	ДанныеОперации = Новый Структура;
	ДанныеОперации.Вставить("ВидОперации"         , ВидОперации);
	ДанныеОперации.Вставить("ДатаНачала"          , ДатаНачалаВыполненияОперации);
	ДанныеОперации.Вставить("ДатаОкончания"       , ДатаОкончанияВыполненияОперации);
	ДанныеОперации.Вставить("СдвигатьДатуЗагрузки", СдвигатьДатуЗагрузки);
	ДанныеОперации.Вставить("ДанныеОбОшибках"     , МассивОшибок);
	
	ЗафиксироватьИнформациюОВыполненииОперации(ДанныеОперации, ВыводитьСообщения);
	
КонецПроцедуры

Процедура ЗафиксироватьИнформациюОВыполненииОперации(ДанныеОперации, ВыводитьСообщения = Ложь)
	
	ТекстОшибки = СтрСоединить(ДанныеОперации.ДанныеОбОшибках);
	
	ВариантВеденияЖурнала = ИнтеграцияВетисAPIСлужебный.ВариантВеденияЖурналаЗагрузкиДанных("РегистрСведений.ЖурналВыполненияРегламентныхЗаданий");
	
	Если ВариантВеденияЖурнала = Перечисления.ВариантыВеденияЖурналовЗагрузкиДанных.Полный ИЛИ 
		(ВариантВеденияЖурнала = Перечисления.ВариантыВеденияЖурналовЗагрузкиДанных.ЗавершившиесяСОшибками И ЗначениеЗаполнено(ТекстОшибки)) Тогда
		
		МенеджерЗаписи = РегистрыСведений.ЖурналВыполненияРегламентныхЗаданий.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Идентификатор           = Строка(Новый УникальныйИдентификатор());
		МенеджерЗаписи.ВидРегламентногоЗадания = ДанныеОперации.ВидОперации;
		МенеджерЗаписи.ДатаНачалаВыполнения    = ДанныеОперации.ДатаНачала;
		МенеджерЗаписи.ДатаОкончанияВыполнения = ДанныеОперации.ДатаОкончания;
		МенеджерЗаписи.Комментарий             = ТекстОшибки;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
	Если ДанныеОперации.СдвигатьДатуЗагрузки Тогда
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("ВидОперации", ДанныеОперации.ВидОперации);
		//Необходимо зафиксировать дату начала выполнения операции как дату последней загрузки,
		//т.к. если смещение дат равно 0, то потеряем промежуток времени который был затрачен от начала до завершения операции
		СтруктураЗаписи.Вставить("Дата"       , ДанныеОперации.ДатаНачала);
		РегистрыСведений.ДатыПоследнихЗагрузокНСИ.ДобавитьЗапись(СтруктураЗаписи);
	КонецЕсли;
	
	Если ВыводитьСообщения Тогда
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			
			ОписаниеОшибки = НСтр("ru = 'Операция %1 завершена с ошибками:
						|%2'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, ДанныеОперации.ВидОперации, ТекстОшибки));
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить(НСтр("ru = 'Операция %1 завершена успешно.'"), "%1", ДанныеОперации.ВидОперации));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТекущийСтатусСостоянийЗаявокНаОформлениеОпераций(Ссылка = Неопределено, Статус, ИдентификаторЗаявки = "", Текст = "", ТекстОшибки = "") Экспорт

	ТекущаяДата = ТекущаяДата();
	НачатьТранзакцию();
	
	Попытка
		
		РегистраторЗаписи = Документы.РегистраторЗаписи.СоздатьДокумент();
		РегистраторЗаписи.Дата = ТекущаяДата;
		РегистраторЗаписи.УстановитьНовыйНомер();
		РегистраторЗаписи.Записать();
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций");
		ЭлементБлокировки.УстановитьЗначение("ДокументСсылка", Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();

		
		НаборЗаписей = РегистрыСведений.ЖурналРегистрацииСостоянийЗаявокНаОформлениеОпераций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(РегистраторЗаписи.Ссылка);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Период 			        = ТекущаяДата;
		НоваяЗапись.ДокументСсылка          = Ссылка;
		НоваяЗапись.Статус 			        = Статус;
		Если Статус <> Справочники.СтатусыЗаявок.Новая Тогда
			НоваяЗапись.GUID_Меркурий 	    = ИдентификаторЗаявки;
			НоваяЗапись.Текст 			    = Текст;
			НоваяЗапись.ОшибкиВыполнения    = ТекстОшибки;
		КонецЕсли;
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ИгнорироватьКонтрольЗаписи", Истина);
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Ошибка записи в регистр ""Журнал состояний заявок на оформление операций""'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ОписаниеОшибки(),
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		ОтменитьТранзакцию();
	КонецПопытки;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПроизводственныеОперации") Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольПартийПриНезавершенномПроизводстве") Тогда
			Если Статус = Справочники.СтатусыЗаявок.Отклонена ИЛИ Статус = Справочники.СтатусыЗаявок.ОшибкаОбработкиОтвета
				ИЛИ Статус = Справочники.СтатусыЗаявок.ОшибкаОтправкиЗапроса Тогда
				ОтразитьДанныеПоПартиямПроизводства(Ссылка, Истина);
			ИначеЕсли Статус = Справочники.СтатусыЗаявок.Новая Тогда
				ОтразитьДанныеПоПартиямПроизводства(Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтразитьДанныеПоПартиямПроизводства(ДокументСсылка, ОшибкаВыполнения = Ложь)
	
	Если НЕ ДокументСсылка.НезавершенноеПроизводство Тогда
		Возврат;
	КонецЕсли;
	
	//В случаи ошибки обработки документа (ошибка отправки запроса, ошибка обработки в Меркурии и т.д.) необходимо удалить движения сформированные документом
	Если ОшибкаВыполнения Тогда
		НаборЗаписей = РегистрыСведений.ПроизводственныеПартии.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Очистить();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ИгнорироватьКонтрольЗаписи", Истина);
		НаборЗаписей.Записать();
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Период КАК Период,
		|	ПроизводственныеОперацииТаблицаПродукции.Ссылка.Организация,
		|	ПроизводственныеОперацииТаблицаПродукции.Ссылка.Предприятие,
		|	ПроизводственныеОперацииТаблицаПродукции.Ссылка.ИдентификаторТранзакции,
		|	ПроизводственныеОперацииТаблицаПродукции.НомерПартии,
		|	ПроизводственныеОперацииТаблицаПродукции.Ссылка.ЗавершитьПроизводство КАК ЗавершеноПроизводство
		|ПОМЕСТИТЬ НомераПартий
		|ИЗ
		|	Документ.ПроизводственныеОперации.ТаблицаПродукции КАК ПроизводственныеОперацииТаблицаПродукции
		|ГДЕ
		|	ПроизводственныеОперацииТаблицаПродукции.Ссылка = &Ссылка
		|	И ПроизводственныеОперацииТаблицаПродукции.НомерПартии <> ЗНАЧЕНИЕ(Справочник.НомераПроизводственныхПартий.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Период,
		|	ПроизводственныеПартииСрезПоследних.Организация,
		|	ПроизводственныеПартииСрезПоследних.Предприятие,
		|	ПроизводственныеПартииСрезПоследних.ИдентификаторТранзакции,
		|	ПроизводственныеПартииСрезПоследних.НомерПартии,
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ПроизводственныеПартии.СрезПоследних(
		|			,
		|			(Предприятие, ИдентификаторТранзакции) В
		|				(ВЫБРАТЬ
		|					ПроизводственныеОперации.Ссылка.Предприятие,
		|					ПроизводственныеОперации.Ссылка.ИдентификаторТранзакции
		|				ИЗ
		|					Документ.ПроизводственныеОперации КАК ПроизводственныеОперации
		|				ГДЕ
		|					ПроизводственныеОперации.ЗавершитьПроизводство
		|					И ПроизводственныеОперации.Ссылка = &Ссылка)) КАК ПроизводственныеПартииСрезПоследних
		|ГДЕ
		|	НЕ ПроизводственныеПартииСрезПоследних.ЗавершеноПроизводство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НомераПартий.Период,
		|	НомераПартий.Организация,
		|	НомераПартий.Предприятие,
		|	НомераПартий.ИдентификаторТранзакции,
		|	НомераПартий.НомерПартии,
		|	НомераПартий.ЗавершеноПроизводство
		|ИЗ
		|	НомераПартий КАК НомераПартий
		|
		|СГРУППИРОВАТЬ ПО
		|	НомераПартий.ЗавершеноПроизводство,
		|	НомераПартий.Период,
		|	НомераПартий.НомерПартии,
		|	НомераПартий.ИдентификаторТранзакции,
		|	НомераПартий.Предприятие,
		|	НомераПартий.Организация";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НаборЗаписей = РегистрыСведений.ПроизводственныеПартии.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
	НаборЗаписей.Прочитать();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		
	КонецЦикла;
	
	НаборЗаписей.ДополнительныеСвойства.Вставить("ИгнорироватьКонтрольЗаписи", Истина);
	НаборЗаписей.Записать();
			
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОшибок

Процедура ЗаписатьОшибкуВЖурналРегистрации(ИмяСобытия, ТекстОшибки)
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		ТекстОшибки);
	
КонецПроцедуры

Процедура ОбработатьСообщениеОбОшибке(ФабрикаВетисAPI, ТекстСообщенияXML, РеквизитыСообщения)
	
	ОписаниеОшибки = "";
	
	Если РеквизитыСообщения.КодСостоянияСервера = 500 Тогда
		
		Попытка
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(ТекстСообщенияXML);
			
			ОбъектXDTO = ФабрикаВетисAPI.ПрочитатьXML(ЧтениеXML);
			
			Если СуществуетСвойствоXDTO("business", ОбъектXDTO.Body.Fault.detail) Тогда
				ИнформацияОбОшибке = ОбъектXDTO.Body.Fault.detail.business.detail;
			Иначе
				ИнформацияОбОшибке = ОбъектXDTO.Body.Fault.detail;
			КонецЕсли;
			
			НеизвестнаяОшибка = Ложь;
			Если СуществуетСвойствоXDTO("accessDeniedFault", ИнформацияОбОшибке) Тогда
				
				ОписаниеОшибки = НСтр("ru = 'Ошибка доступа.'");
				ДанныеОшибки   = ИнформацияОбОшибке.accessDeniedFault;
				
			ИначеЕсли СуществуетСвойствоXDTO("fault", ИнформацияОбОшибке) Тогда
				
				НеизвестнаяОшибка = Истина;
				
			КонецЕсли;
			
			Если Не НеизвестнаяОшибка Тогда
				
				Если СуществуетСвойствоXDTO("error", ДанныеОшибки) Тогда
					
					ТекстОшибки = ПолучитьОписаниеОшибокЗаявки(ДанныеОшибки);
					
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда
						
						ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ТекстОшибки;
						
					КонецЕсли;
					
				Иначе
					
					ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + ДанныеОшибки.message;
					
				КонецЕсли;
				
			Иначе
				
				ОписаниеОшибки = ИнформацияОбОшибке.fault.errorCode + " " + ИнформацияОбОшибке.fault.reason;
				
			КонецЕсли;
			
		Исключение
			
			ОписаниеОшибки = НСтр("ru = 'Неизвестная ошибка.'");
			
			ЗаписатьОшибкуВЖурналРегистрации(
				НСтр("ru = 'Ошибка обработки ответа.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
		РеквизитыСообщения.ОшибкиВыполненияОбмена = СтрШаблон(
			НСтр("ru = 'Ошибка ответа сервера. Код состояния сервера: %1.
				|Описание ошибки: %2'"),
			РеквизитыСообщения.КодСостоянияСервера,
			ОписаниеОшибки);
		
	Иначе
		
		Если РеквизитыСообщения.КодСостоянияСервера = 401 Тогда
			
			ОписаниеОшибки = НСтр("ru = 'Пользователь шлюза не прошёл первичную авторизацию в security-слое.
								|Причины могут быть следующие:
								|• Не указаны логин и пароль, требуемые для авторизации. Они приходят в письме вместе с apiKey и IssuerID.
								|• Логин и/или пароль указаны неверно. Необходимо проверить правильность идентифкационных данных.'");
			
			РеквизитыСообщения.ОшибкиВыполненияОбмена = СтрШаблон(
				НСтр("ru = 'Ошибка ответа сервера. Код состояния сервера: %1.
					|Описание ошибки: %2'"),
				РеквизитыСообщения.КодСостоянияСервера,
				ОписаниеОшибки);
			
		Иначе
			
			Если СтрНайти(РеквизитыСообщения.ОшибкиВыполненияОбмена, "Couldn't resolve host name") > 0
				ИЛИ СтрНайти(РеквизитыСообщения.ОшибкиВыполненияОбмена, "Failure when receiving data from the peer") > 0
				ИЛИ СтрНайти(РеквизитыСообщения.ОшибкиВыполненияОбмена, "Ошибка инициализации SSL-соединения") > 0
				ИЛИ СтрНайти(РеквизитыСообщения.ОшибкиВыполненияОбмена, "Удаленный узел не прошел проверку") > 0
				ИЛИ СтрНайти(РеквизитыСообщения.ОшибкиВыполненияОбмена, "Не могу установить соединение") > 0 Тогда
				
				ОписаниеОшибки = НСтр("ru = 'Ошибка соединения.'") + Символы.ПС;
				ОписаниеОшибки = ОписаниеОшибки + НСтр("ru = 'Возможные причины:'") + Символы.ПС;
				ОписаниеОшибки = ОписаниеОшибки + НСтр("ru = '• Не верно указан адрес сервиса в настройках подключения к Ветис.API;'") + Символы.ПС;
				ОписаниеОшибки = ОписаниеОшибки + НСтр("ru = '• Нет подключения к Интернету;'") + Символы.ПС;
				ОписаниеОшибки = ОписаниеОшибки + НСтр("ru = '• Брандмауэр или другое промежуточное ПО (антивирусы и т.п.) блокируют попытки программы подключиться к Интернету;'") + Символы.ПС;
				ОписаниеОшибки = ОписаниеОшибки + НСтр("ru = '• Подключение к Интернету выполняется через прокси-сервер, но его параметры не заданы в программе.'") + Символы.ПС;
				ОписаниеОшибки = ОписаниеОшибки + НСтр("ru = 'Техническая информация:'") + " " + Символы.ПС;
				ОписаниеОшибки = ОписаниеОшибки + РеквизитыСообщения.ОшибкиВыполненияОбмена;
				
			Иначе
				
				ОписаниеОшибки = РеквизитыСообщения.ОшибкиВыполненияОбмена;
				
			КонецЕсли;
		
			РеквизитыСообщения.ОшибкиВыполненияОбмена = СтрШаблон(
				НСтр("ru = 'Ошибка отправки заявки в ИС ""Меркурий"". 
					|Описание ошибки: %1'"),
					ОписаниеОшибки);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОписаниеОшибокЗаявки(ОшибкиДанных)
	
	ТекстОшибок = "";
	
	Если ТипЗнч(ОшибкиДанных.error) = Тип("СписокXDTO") Тогда
		
		Для Каждого ТекОшибка Из ОшибкиДанных.error Цикл
			
			ДобавитьОписаниеОшибки(ТекстОшибок, ТекОшибка);
			
		КонецЦикла;
		
	Иначе
		
		ДобавитьОписаниеОшибки(ТекстОшибок, ОшибкиДанных.error);
		
	КонецЕсли;
	
	Возврат ТекстОшибок;
	
КонецФункции

Процедура ДобавитьОписаниеОшибки(ТекстОшибок, ОшибкаXDTO)
	
	СтруктураОшибки = Новый Структура("qualifier, code");
	ЗаполнитьЗначенияСвойств(СтруктураОшибки, ОшибкаXDTO);
	
	ТекстОшибкиСтрока = НСтр("ru = 'В строке %1 ошибка: '");
	
	СтрокаОшибки = "";
	
	Если СтруктураОшибки["qualifier"] <> Неопределено Тогда
		//Ошибка в строке документа с указанием номера строки в виде "_НомерСтроки"
		НомерСтроки = Сред(СтруктураОшибки["qualifier"], 2);
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибкиСтрока, НомерСтроки);
	КонецЕсли;
	
	ОписаниеОшибки = СтруктураОшибки["code"] + " " + ОшибкаXDTO.Последовательность().ПолучитьТекст(0);
	
	ТекстОшибок = ТекстОшибок + ?(ТекстОшибок <> "", Символы.ПС, "") + СтрокаОшибки + ОписаниеОшибки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СуществуетСвойствоXDTO(ИмяСвойства, ОбъектXDTO)
	
	СтруктураПараметров = Новый Структура(ИмяСвойства);
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ОбъектXDTO);
	
	Возврат СтруктураПараметров[ИмяСвойства] <> Неопределено

КонецФункции

Функция ПолучитьТекстЗапросаДляОбновленияОбъекта(ТипОбъекта) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаОбновлений.GUID_Меркурий,
		|	ТаблицаОбновлений.UUID_Меркурий,
		|	ТаблицаОбновлений.ОписаниеОбъекта
		|ПОМЕСТИТЬ ВТ_ТаблицаОбновлений
		|ИЗ
		|	&ТаблицаОбновлений КАК ТаблицаОбновлений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Справочник.Ссылка,
		|	ВТ_ТаблицаОбновлений.GUID_Меркурий,
		|	ВТ_ТаблицаОбновлений.UUID_Меркурий,
		|	ВТ_ТаблицаОбновлений.ОписаниеОбъекта
		|ПОМЕСТИТЬ ДанныеОбновлений
		|ИЗ
		|	ВТ_ТаблицаОбновлений КАК ВТ_ТаблицаОбновлений
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ТипОбъекта + " КАК Справочник
		|		ПО ВТ_ТаблицаОбновлений.GUID_Меркурий = Справочник.GUID_Меркурий
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ТолькоОбновление
		|				ТОГДА НЕ Справочник.Ссылка ЕСТЬ NULL
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ДанныеОбновлений.Ссылка, НЕОПРЕДЕЛЕНО) КАК Ссылка,
		|	ДанныеОбновлений.GUID_Меркурий,
		|	ДанныеОбновлений.UUID_Меркурий,
		|	ДанныеОбновлений.ОписаниеОбъекта
		|ИЗ
		|	ДанныеОбновлений КАК ДанныеОбновлений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИдентификаторыВерсийОбъектов.СрезПоследних(
		|				,
		|				[ТипОбъекта] И
		|				(GUID_Меркурий, UUID_Меркурий) В
		|					(ВЫБРАТЬ
		|						ДанныеОбновлений.GUID_Меркурий,
		|						ДанныеОбновлений.UUID_Меркурий
		|					ИЗ
		|						ДанныеОбновлений КАК ДанныеОбновлений)) КАК ИдентификаторыВерсийОбъектовСрезПоследних
		|		ПО ДанныеОбновлений.Ссылка = ИдентификаторыВерсийОбъектовСрезПоследних.Объект
		|ГДЕ
		|	ИдентификаторыВерсийОбъектовСрезПоследних.Объект ЕСТЬ NULL";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ТипОбъекта]", "Объект ССЫЛКА Справочник." + ТипОбъекта);
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ВыполнитьПреобразованиеИзСтрокиXML(Тип, ЗначениеДляПреобразования, ЕстьОшибкиПреобразованияКТипу) Экспорт
	
	ЕстьОшибкиПреобразованияКТипу = Ложь;
	
	Попытка
		Если Тип = Тип("Число") Тогда
			ПреобразованноеЗначение = Число(ЗначениеДляПреобразования);
		ИначеЕсли Тип = Тип("Булево") Тогда
			ПреобразованноеЗначение = Булево(ЗначениеДляПреобразования);
		Иначе
			ПреобразованноеЗначение = XMLЗначение(Тип, ЗначениеДляПреобразования);
		КонецЕсли;
	Исключение
		ПреобразованноеЗначение = Неопределено;
		ЕстьОшибкиПреобразованияКТипу = Истина;
	КонецПопытки;
	
	Возврат ПреобразованноеЗначение;
КонецФункции

Функция ПолучитьСтруктуруРезультата() Экспорт

	РезультатВыполненияОперации = Новый Структура;
	РезультатВыполненияОперации.Вставить("Результат");
	РезультатВыполненияОперации.Вставить("ТекстЗапроса");
	РезультатВыполненияОперации.Вставить("ТекстОтвета");
	РезультатВыполненияОперации.Вставить("КодСостояния");
	РезультатВыполненияОперации.Вставить("Статус");
	РезультатВыполненияОперации.Вставить("ОшибкаСоединения", Ложь);
	РезультатВыполненияОперации.Вставить("ОписаниеОшибки");

	Возврат РезультатВыполненияОперации;
КонецФункции

Процедура УстановитьТаймаут(ТаймаутОпросаСервера = 0) Экспорт
	
	Если ТаймаутОпросаСервера = 0 Тогда
		ТаймаутОпросаСервера = Константы.ТаймаутОпросаСервера.Получить();//Вынести в повторное использование (ИнтеграцияВетисAPIСлужебныйПовтИсп)
	КонецЕсли;
	
	Если ТаймаутОпросаСервера <> 0 Тогда
		
		НастройкиПрокси = Новый ИнтернетПрокси(Истина);
		НастройкиПрокси.НеИспользоватьПроксиДляЛокальныхАдресов = Истина;
		НастройкиПрокси.НеИспользоватьПроксиДляАдресов.Добавить("127.0.0.0");
		
		Loopback = Новый HTTPСоединение(
						"127.0.0.0",,,,НастройкиПрокси,
						ТаймаутОпросаСервера);
		Попытка
			Loopback.Получить(Новый HTTPЗапрос());
			HTTPОтвет = Loopback.Получить(Новый HTTPЗапрос());
			Если Не HTTPОтвет = Неопределено Тогда//Есть ответ, используем старый таймаут
				ВремяОкончанияТаймаута = ТекущаяДата() + ТаймаутОпросаСервера;
				Пока ТекущаяДата() < ВремяОкончанияТаймаута Цикл КонецЦикла;
			КонецЕсли;
		Исключение
			ПредставлениеОшибки = ОписаниеОшибки();//Значение таймаута ОС меньше текущего значения, используем старый таймаут
			Если СтрНайти(ПредставлениеОшибки, "Не могу установить соединение") Тогда
				ВремяОкончанияТаймаута = ТекущаяДата() + ТаймаутОпросаСервера;
				Пока ТекущаяДата() < ВремяОкончанияТаймаута Цикл КонецЦикла;
			КонецЕсли;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЭлементСправочника(ИмяСправочника, СтруктураРеквизитовПоиска) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ТаблицаСправочник.Ссылка
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК ТаблицаСправочник
	|ГДЕ
	|	ИСТИНА";
	Для каждого КлючИЗначение Из СтруктураРеквизитовПоиска Цикл
		ТекстЗапроса = ТекстЗапроса + " И ТаблицаСправочник." + КлючИЗначение.Ключ + " = &" + КлючИЗначение.Ключ + "";
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Для каждого КлючИЗначение Из СтруктураРеквизитовПоиска Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьОбъект(Объект, ТекстОшибки = "") Экспорт
	
	ТекстОшибки = "";
	
	НачатьТранзакцию();
	Попытка
		Объект.ОбменДанными.Загрузка = Истина;
		Если Не ЗначениеЗаполнено(Объект.Код) Тогда
			Объект.УстановитьНовыйКод();
		КонецЕсли;
		Объект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ТекстОшибки = НСтр("ru = 'Ошибка записи объекта %1 %2:
							|%3'");
							
		ПредставлениеОшибки = ОписаниеОшибки();
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ТипЗнч(Объект), Объект, ПредставлениеОшибки);
		
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

Функция ИдентификаторВерсииОбъекта(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ИдентификаторыВерсийОбъектовСрезПоследних.UUID_Меркурий КАК UUID_Меркурий
		|ИЗ
		|	РегистрСведений.ИдентификаторыВерсийОбъектов.СрезПоследних(
		|			,
		|			Объект = &Объект
		|				И GUID_Меркурий = &GUID_Меркурий) КАК ИдентификаторыВерсийОбъектовСрезПоследних";
	
	Запрос.УстановитьПараметр("Объект",        Объект);
	Запрос.УстановитьПараметр("GUID_Меркурий", Объект.GUID_Меркурий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.UUID_Меркурий;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьЗаписьВРегистрВерсийОбъектов(Объект, СтруктураСвойств, ТекстОшибки = "") Экспорт
	
	Период = СтруктураСвойств["updateDate"];
	
	Если ТипЗнч(Период) = Тип("Строка") Тогда
		ЕстьОшибкиПреобразования = Ложь;
		Период = ВыполнитьПреобразованиеИзСтрокиXML(Тип("Дата"), Период, ЕстьОшибкиПреобразования);
		Если ЕстьОшибкиПреобразования Тогда
			Период = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	
	UUID_Меркурий = СтруктураСвойств["uuid"];
	Последний     = СтруктураСвойств["last"];
	
	НачатьТранзакцию();
	Попытка
		НаборЗаписей = РегистрыСведений.ИдентификаторыВерсийОбъектов.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Период.Установить(Период);
		НаборЗаписей.Отбор.Объект.Установить(Объект);
		НаборЗаписей.Отбор.GUID_Меркурий.Установить(Объект.GUID_Меркурий);
		
		НоваяЗапись  			  = НаборЗаписей.Добавить();
		НоваяЗапись.Период		  = Период;
		НоваяЗапись.Объект        = Объект;
		НоваяЗапись.GUID_Меркурий = Объект.GUID_Меркурий;
		НоваяЗапись.UUID_Меркурий = UUID_Меркурий;
		
		НаборЗаписей.ДополнительныеСвойства.Вставить("ИгнорироватьКонтрольЗаписи", Истина);
		
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Ошибка записи версии %1 ""%2"":
							|%3'");
							
		ПредставлениеОшибки = ОписаниеОшибки();
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ТипЗнч(Объект), Объект, ПредставлениеОшибки);
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

Функция ВариантВеденияЖурналаЗагрузкиДанных(ВидОбъекта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиВеденияЖурналовЗагрузкиДанных.ВариантВеденияЖурнала КАК ВариантВеденияЖурнала
		|ИЗ
		|	РегистрСведений.НастройкиВеденияЖурналовЗагрузкиДанных КАК НастройкиВеденияЖурналовЗагрузкиДанных
		|ГДЕ
		|	НастройкиВеденияЖурналовЗагрузкиДанных.ВидОбъекта.ПолноеИмя = &ПолноеИмя";
	
	Запрос.УстановитьПараметр("ПолноеИмя", ВидОбъекта);
	
	РезультатВыборки = Запрос.Выполнить().Выбрать();
	Если НЕ РезультатВыборки.Следующий() Тогда
		Возврат Перечисления.ВариантыВеденияЖурналовЗагрузкиДанных.ЗавершившиесяСОшибками;
	КонецЕсли;
	
	Возврат РезультатВыборки.ВариантВеденияЖурнала;
	
КонецФункции

// Проверяет является ли текущее фоновое задание единственным которое сейчас выполняется
// Если запущено еще такое же, то рег. задание не будет выполнено
Функция ВыполняетсяТекущееФоновоеЗадание(РегламентноеЗадание, ЗнакСравнения = "=") Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяМетода", РегламентноеЗадание.ИмяМетода);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	ФоновыеЗаданияПроверка = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	// 1 - текущее фоновое
	Если ЗнакСравнения = "<>" Тогда
		Возврат ФоновыеЗаданияПроверка.Количество() <> 1;
	Иначе 
		Возврат ФоновыеЗаданияПроверка.Количество() = 1;
	КонецЕсли;
	
КонецФункции

#КонецОбласти